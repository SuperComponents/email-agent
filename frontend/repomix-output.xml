<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.storybook/
  main.ts
  preview.ts
  vitest.setup.ts
public/
  vite.svg
src/
  components/
    atoms/
      Avatar.tsx
      Badge.tsx
      Button.tsx
      Icon.tsx
      index.ts
      Input.tsx
      Label.tsx
      Separator.tsx
    molecules/
      AgentAction.tsx
      FilterPills.tsx
      index.ts
      SearchInput.tsx
      ThreadPreview.tsx
    organisms/
      AgentPanel.tsx
      Composer.tsx
      Header.tsx
      index.ts
      ThreadDetail.tsx
      ThreadList.tsx
    templates/
      AppLayout.tsx
      AuthLayout.tsx
      index.ts
    ProtectedRoute.tsx
  containers/
    AgentPanelContainer.tsx
    AuthContainer.tsx
    ComposerContainer.tsx
    index.ts
    ThreadDetailContainer.tsx
    ThreadListContainer.tsx
  lib/
    stack.ts
    utils.ts
  pages/
    InboxPage.tsx
    index.ts
    LoginPage.tsx
  repo/
    api-client.ts
    hooks.ts
    mock-api.ts
    mock-data.ts
    query-client.ts
  stores/
    auth-store.ts
    composer-store.ts
    ui-store.ts
  stories/
    atoms/
      Avatar.stories.tsx
      Badge.stories.tsx
      Button.stories.tsx
      Input.stories.tsx
    molecules/
      AgentAction.stories.tsx
      FilterPills.stories.tsx
      SearchInput.stories.tsx
      ThreadPreview.stories.tsx
    organisms/
      AgentPanel.stories.tsx
      Composer.stories.tsx
      Header.stories.tsx
      ThreadDetail.stories.tsx
      ThreadList.stories.tsx
    templates/
      AppLayout.stories.tsx
      AuthLayout.stories.tsx
    DesignSystem.stories.tsx
  types/
    api.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
variations/
  design1.html
  design2.html
  design3.html
  design4.html
  design5.html
  design6.html
  source.html
.env.example
CLAUDE.md
design-system.md
eslint.config.js
index.html
package.json
README.md
template.html
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
vitest.shims.d.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".storybook/main.ts">
import type { StorybookConfig } from '@storybook/react-vite';

const config: StorybookConfig = {
  "stories": [
    "../src/**/*.mdx",
    "../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"
  ],
  "addons": [
    "@chromatic-com/storybook",
    "@storybook/addon-docs",
    "@storybook/addon-onboarding",
    "@storybook/addon-a11y",
    "@storybook/addon-vitest"
  ],
  "framework": {
    "name": "@storybook/react-vite",
    "options": {}
  }
};
export default config;
</file>

<file path=".storybook/preview.ts">
import '../src/index.css';
import type { Preview } from '@storybook/react-vite'

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
       color: /(background|color)$/i,
       date: /Date$/i,
      },
    },

    a11y: {
      // 'todo' - show a11y violations in the test UI only
      // 'error' - fail CI on a11y violations
      // 'off' - skip a11y checks entirely
      test: 'todo'
    }
  },
};

export default preview;
</file>

<file path=".storybook/vitest.setup.ts">
import * as a11yAddonAnnotations from "@storybook/addon-a11y/preview";
import { setProjectAnnotations } from '@storybook/react-vite';
import * as projectAnnotations from './preview';

// This is an important step to apply the right configuration when testing your stories.
// More info at: https://storybook.js.org/docs/api/portable-stories/portable-stories-vitest#setprojectannotations
setProjectAnnotations([a11yAddonAnnotations, projectAnnotations]);
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/components/atoms/Avatar.tsx">
import React from 'react';
import { cn } from '../../lib/utils';

export interface AvatarProps extends React.HTMLAttributes<HTMLDivElement> {
  src?: string;
  alt?: string;
  fallback?: string;
  size?: 'sm' | 'md' | 'lg';
}

export const Avatar = React.forwardRef<HTMLDivElement, AvatarProps>(
  ({ className, src, alt, fallback, size = 'md', ...props }, ref) => {
    const sizeClasses = {
      sm: 'h-8 w-8 text-xs',
      md: 'h-10 w-10 text-sm',
      lg: 'h-12 w-12 text-base',
    };

    return (
      <div
        ref={ref}
        className={cn(
          'relative flex shrink-0 overflow-hidden rounded-full',
          sizeClasses[size],
          className
        )}
        {...props}
      >
        {src ? (
          <img
            src={src}
            alt={alt}
            className="aspect-square h-full w-full object-cover"
          />
        ) : (
          <div className="flex h-full w-full items-center justify-center bg-secondary text-secondary-foreground font-semibold">
            {fallback}
          </div>
        )}
      </div>
    );
  }
);

Avatar.displayName = 'Avatar';
</file>

<file path="src/components/atoms/Badge.tsx">
import React from 'react';
import { cn } from '../../lib/utils';

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: 'default' | 'secondary' | 'destructive' | 'outline';
}

export const Badge = React.forwardRef<HTMLDivElement, BadgeProps>(
  ({ className, variant = 'default', ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors',
          'focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
          {
            'bg-primary text-primary-foreground': variant === 'default',
            'bg-secondary text-secondary-foreground': variant === 'secondary',
            'bg-destructive text-destructive-foreground': variant === 'destructive',
            'text-foreground border border-border': variant === 'outline',
          },
          className
        )}
        {...props}
      />
    );
  }
);

Badge.displayName = 'Badge';
</file>

<file path="src/components/atoms/Button.tsx">
import React from 'react';
import { cn } from '../../lib/utils';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'destructive' | 'ghost' | 'link';
  size?: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
}

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'primary', size = 'md', children, ...props }, ref) => {
    return (
      <button
        ref={ref}
        className={cn(
          'inline-flex items-center justify-center font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',
          {
            'bg-primary text-primary-foreground hover:bg-primary/90': variant === 'primary',
            'bg-secondary text-secondary-foreground hover:bg-secondary/80': variant === 'secondary',
            'bg-destructive text-destructive-foreground hover:bg-destructive/90': variant === 'destructive',
            'hover:bg-accent hover:text-accent-foreground': variant === 'ghost',
            'text-primary underline-offset-4 hover:underline': variant === 'link',
          },
          {
            'h-8 px-3 text-sm rounded-md': size === 'sm',
            'h-10 px-4 text-base rounded-md': size === 'md',
            'h-12 px-6 text-lg rounded-md': size === 'lg',
          },
          className
        )}
        {...props}
      >
        {children}
      </button>
    );
  }
);

Button.displayName = 'Button';
</file>

<file path="src/components/atoms/Icon.tsx">
import React from 'react';
import type { LucideIcon } from 'lucide-react';
import { cn } from '../../lib/utils';

export interface IconProps extends React.HTMLAttributes<HTMLSpanElement> {
  icon: LucideIcon;
  size?: 'sm' | 'md' | 'lg';
}

export const Icon = React.forwardRef<HTMLSpanElement, IconProps>(
  ({ className, icon: IconComponent, size = 'md', ...props }, ref) => {
    const sizeMap = {
      sm: 16,
      md: 20,
      lg: 24,
    };

    return (
      <span
        ref={ref}
        className={cn('inline-flex shrink-0', className)}
        {...props}
      >
        <IconComponent size={sizeMap[size]} />
      </span>
    );
  }
);

Icon.displayName = 'Icon';
</file>

<file path="src/components/atoms/index.ts">
export { Button } from './Button';
export { Input } from './Input';
export { Label } from './Label';
export { Avatar } from './Avatar';
export { Badge } from './Badge';
export { Separator } from './Separator';
export { Icon } from './Icon';

export type { ButtonProps } from './Button';
export type { InputProps } from './Input';
export type { LabelProps } from './Label';
export type { AvatarProps } from './Avatar';
export type { BadgeProps } from './Badge';
export type { SeparatorProps } from './Separator';
export type { IconProps } from './Icon';
</file>

<file path="src/components/atoms/Input.tsx">
import React from 'react';
import { cn } from '../../lib/utils';

export const Input = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-border bg-input px-3 py-2 text-sm ring-offset-background',
          'file:border-0 file:bg-transparent file:text-sm file:font-medium',
          'placeholder:text-secondary-foreground',
          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
          'disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);

Input.displayName = 'Input';
</file>

<file path="src/components/atoms/Label.tsx">
import React from 'react';
import { cn } from '../../lib/utils';

export const Label = React.forwardRef<HTMLLabelElement, React.LabelHTMLAttributes<HTMLLabelElement>>(
  ({ className, ...props }, ref) => {
    return (
      <label
        ref={ref}
        className={cn(
          'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
          className
        )}
        {...props}
      />
    );
  }
);

Label.displayName = 'Label';
</file>

<file path="src/components/atoms/Separator.tsx">
import React from 'react';
import { cn } from '../../lib/utils';

export interface SeparatorProps extends React.HTMLAttributes<HTMLDivElement> {
  orientation?: 'horizontal' | 'vertical';
}

export const Separator = React.forwardRef<HTMLDivElement, SeparatorProps>(
  ({ className, orientation = 'horizontal', ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'shrink-0 bg-border',
          orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
          className
        )}
        {...props}
      />
    );
  }
);

Separator.displayName = 'Separator';
</file>

<file path="src/components/molecules/AgentAction.tsx">
import React from 'react';
import type { LucideIcon } from 'lucide-react';
import { Icon } from '../atoms/Icon';
import { cn } from '../../lib/utils';

export interface AgentActionProps extends React.HTMLAttributes<HTMLDivElement> {
  icon: LucideIcon;
  title: string;
  description?: string;
  timestamp?: string;
  status?: 'pending' | 'completed' | 'failed';
}

export const AgentAction = React.forwardRef<HTMLDivElement, AgentActionProps>(
  ({ className, icon, title, description, timestamp, status = 'completed', ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'flex gap-3 p-3 rounded-lg bg-card/50 border border-border',
          className
        )}
        {...props}
      >
        <Icon
          icon={icon}
          size="sm"
          className={cn(
            'mt-0.5',
            status === 'completed' && 'text-primary',
            status === 'pending' && 'text-secondary-foreground',
            status === 'failed' && 'text-destructive'
          )}
        />
        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between gap-2">
            <h4 className="text-sm font-medium">{title}</h4>
            {timestamp && (
              <time className="text-xs text-secondary-foreground">
                {timestamp}
              </time>
            )}
          </div>
          {description && (
            <p className="text-sm text-secondary-foreground mt-1">
              {description}
            </p>
          )}
        </div>
      </div>
    );
  }
);

AgentAction.displayName = 'AgentAction';
</file>

<file path="src/components/molecules/FilterPills.tsx">
import React from 'react';
import { Button } from '../atoms/Button';
import { cn } from '../../lib/utils';

export interface FilterOption {
  id: string;
  label: string;
  count?: number;
}

export interface FilterPillsProps extends React.HTMLAttributes<HTMLDivElement> {
  options: FilterOption[];
  value?: string;
  onValueChange?: (value: string) => void;
}

export const FilterPills = React.forwardRef<HTMLDivElement, FilterPillsProps>(
  ({ className, options, value, onValueChange, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('flex flex-wrap gap-2', className)}
        {...props}
      >
        {options.map((option) => (
          <Button
            key={option.id}
            variant={value === option.id ? 'primary' : 'ghost'}
            size="sm"
            onClick={() => onValueChange?.(option.id)}
            className="rounded-full"
          >
            {option.label}
            {option.count !== undefined && (
              <span className="ml-1.5 text-xs opacity-70">
                {option.count}
              </span>
            )}
          </Button>
        ))}
      </div>
    );
  }
);

FilterPills.displayName = 'FilterPills';
</file>

<file path="src/components/molecules/index.ts">
export { SearchInput } from './SearchInput';
export { FilterPills } from './FilterPills';
export { ThreadPreview } from './ThreadPreview';
export { AgentAction } from './AgentAction';

export type { SearchInputProps } from './SearchInput';
export type { FilterPillsProps, FilterOption } from './FilterPills';
export type { ThreadPreviewProps } from './ThreadPreview';
export type { AgentActionProps } from './AgentAction';
</file>

<file path="src/components/molecules/SearchInput.tsx">
import React from 'react';
import { Search } from 'lucide-react';
import { Input } from '../atoms/Input';
import { Icon } from '../atoms/Icon';
import { cn } from '../../lib/utils';

export const SearchInput = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
  ({ className, ...props }, ref) => {
    return (
      <div className="relative">
        <Icon
          icon={Search}
          size="sm"
          className="absolute left-3 top-1/2 -translate-y-1/2 text-secondary-foreground"
        />
        <Input
          ref={ref}
          type="search"
          className={cn('pl-9', className)}
          {...props}
        />
      </div>
    );
  }
);

SearchInput.displayName = 'SearchInput';
</file>

<file path="src/components/molecules/ThreadPreview.tsx">
import React from 'react';
import { Avatar } from '../atoms/Avatar';
import { Badge } from '../atoms/Badge';
import { cn } from '../../lib/utils';

export interface ThreadPreviewProps extends React.HTMLAttributes<HTMLDivElement> {
  id?: string;
  title: string;
  snippet: string;
  author: {
    name: string;
    avatar?: string;
    initials?: string;
  };
  timestamp: string;
  isActive?: boolean;
  isUnread?: boolean;
  badges?: Array<{
    label: string;
    variant?: 'default' | 'secondary' | 'destructive' | 'outline';
  }>;
}

export const ThreadPreview = React.forwardRef<HTMLDivElement, ThreadPreviewProps>(
  ({ 
    className, 
    title, 
    snippet, 
    author, 
    timestamp, 
    isActive, 
    isUnread,
    badges = [],
    ...props 
  }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'p-4 border-b border-border cursor-pointer transition-colors',
          'hover:bg-accent/50',
          isActive && 'bg-accent',
          className
        )}
        {...props}
      >
        <div className="flex gap-3">
          <Avatar
            src={author.avatar}
            alt={author.name}
            fallback={author.initials}
            size="sm"
          />
          <div className="flex-1 min-w-0">
            <div className="flex items-start justify-between gap-2 mb-1">
              <h3 className={cn(
                'font-semibold truncate',
                isUnread && 'text-foreground',
                !isUnread && 'text-secondary-foreground'
              )}>
                {title}
              </h3>
              <time className="text-xs text-secondary-foreground flex-shrink-0">
                {timestamp}
              </time>
            </div>
            <p className="text-sm text-secondary-foreground truncate mb-2">
              {snippet}
            </p>
            {badges.length > 0 && (
              <div className="flex gap-1.5">
                {badges.map((badge, index) => (
                  <Badge
                    key={index}
                    variant={badge.variant}
                  >
                    {badge.label}
                  </Badge>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
);

ThreadPreview.displayName = 'ThreadPreview';
</file>

<file path="src/components/organisms/AgentPanel.tsx">
import React from 'react';
import { AgentAction, type AgentActionProps } from '../molecules/AgentAction';
import { Separator } from '../atoms/Separator';
import { cn } from '../../lib/utils';

export interface AgentPanelProps extends React.HTMLAttributes<HTMLDivElement> {
  actions: AgentActionProps[];
  analysis?: string;
  draftResponse?: string;
}

export const AgentPanel = React.forwardRef<HTMLDivElement, AgentPanelProps>(
  ({ className, actions, analysis, draftResponse, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'h-full bg-card border-l border-border overflow-y-auto',
          className
        )}
        {...props}
      >
        <div className="p-4">
          <h3 className="font-semibold mb-4">Agent Activity</h3>
          
          {actions.length > 0 && (
            <div className="space-y-3 mb-6">
              <h4 className="text-sm font-medium text-secondary-foreground">
                Tool Calls
              </h4>
              {actions.map((action, index) => (
                <AgentAction key={index} {...action} />
              ))}
            </div>
          )}

          {analysis && (
            <>
              <Separator className="my-4" />
              <div className="space-y-3">
                <h4 className="text-sm font-medium text-secondary-foreground">
                  Analysis
                </h4>
                <div className="text-sm text-foreground/90 leading-relaxed">
                  {analysis}
                </div>
              </div>
            </>
          )}

          {draftResponse && (
            <>
              <Separator className="my-4" />
              <div className="space-y-3">
                <h4 className="text-sm font-medium text-secondary-foreground">
                  Draft Response
                </h4>
                <div className="text-sm bg-accent/50 rounded-lg p-3 border border-accent-foreground/20">
                  {draftResponse}
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    );
  }
);

AgentPanel.displayName = 'AgentPanel';
</file>

<file path="src/components/organisms/Composer.tsx">
import React from 'react';
import { Send, Paperclip, Smile, Save, Sparkles } from 'lucide-react';
import { Button } from '../atoms/Button';
import { Icon } from '../atoms/Icon';
import { cn } from '../../lib/utils';

export interface ComposerProps extends React.HTMLAttributes<HTMLDivElement> {
  value?: string;
  onChange?: (value: string) => void;
  onSend?: () => void;
  onCancel?: () => void;
  onSaveDraft?: () => void;
  onRegenerate?: () => void;
  placeholder?: string;
  disabled?: boolean;
  isGenerating?: boolean;
  isSending?: boolean;
  isSavingDraft?: boolean;
}

export const Composer = React.forwardRef<HTMLDivElement, ComposerProps>(
  ({ 
    className, 
    value = '', 
    onChange, 
    onSend,
    onCancel,
    onSaveDraft,
    onRegenerate, 
    placeholder = 'Type your reply...', 
    disabled = false,
    isGenerating = false,
    isSending = false,
    isSavingDraft = false,
    ...props 
  }, ref) => {
    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
      if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        onSend?.();
      }
    };

    return (
      <div
        ref={ref}
        className={cn(
          'border-t border-border bg-card',
          className
        )}
        {...props}
      >
        <div className="p-4">
          <div className="rounded-lg border border-border bg-input focus-within:ring-2 focus-within:ring-ring">
            <textarea
              value={value}
              onChange={(e) => onChange?.(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder={placeholder}
              disabled={disabled}
              className="w-full px-4 py-3 bg-transparent resize-none focus:outline-none min-h-[100px] max-h-[300px]"
              rows={4}
            />
            <div className="flex items-center justify-between px-3 py-2 border-t border-border">
              <div className="flex gap-1">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onRegenerate}
                  disabled={disabled || isGenerating}
                  title="Generate with AI"
                >
                  <Icon icon={Sparkles} size="sm" />
                  {isGenerating && <span className="ml-1 text-xs">Generating...</span>}
                </Button>
                <Button variant="ghost" size="sm" disabled={disabled}>
                  <Icon icon={Paperclip} size="sm" />
                </Button>
                <Button variant="ghost" size="sm" disabled={disabled}>
                  <Icon icon={Smile} size="sm" />
                </Button>
              </div>
              <div className="flex gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onCancel}
                  disabled={disabled}
                >
                  Cancel
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onSaveDraft}
                  disabled={disabled || isSavingDraft}
                  className="gap-1"
                >
                  <Icon icon={Save} size="sm" />
                  <span>{isSavingDraft ? 'Saving...' : 'Save Draft'}</span>
                </Button>
                <Button
                  size="sm"
                  onClick={onSend}
                  disabled={disabled || !value.trim() || isSending}
                  className="gap-2"
                >
                  <span>{isSending ? 'Sending...' : 'Send'}</span>
                  <Icon icon={Send} size="sm" />
                </Button>
              </div>
            </div>
          </div>
          <p className="text-xs text-secondary-foreground mt-2">
            Press Cmd+Enter to send
          </p>
        </div>
      </div>
    );
  }
);

Composer.displayName = 'Composer';
</file>

<file path="src/components/organisms/Header.tsx">
import React, { useState, useRef, useEffect } from 'react';
import { Menu, Bell, User, LogOut } from 'lucide-react';
import { Button } from '../atoms/Button';
import { Icon } from '../atoms/Icon';
import { Avatar } from '../atoms/Avatar';
import { cn } from '../../lib/utils';
import { useAuthStore } from '../../stores/auth-store';
import { useNavigate } from 'react-router-dom';

export interface HeaderProps extends React.HTMLAttributes<HTMLElement> {
  user?: {
    name: string;
    avatar?: string;
    initials?: string;
  };
  onMenuClick?: () => void;
  notificationCount?: number;
}

export const Header = React.forwardRef<HTMLElement, HeaderProps>(
  ({ className, user, onMenuClick, notificationCount = 0, ...props }, ref) => {
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const dropdownRef = useRef<HTMLDivElement>(null);
    const logout = useAuthStore((state) => state.logout);
    const navigate = useNavigate();

    useEffect(() => {
      function handleClickOutside(event: MouseEvent) {
        if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
          setIsDropdownOpen(false);
        }
      }

      if (isDropdownOpen) {
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
      }
    }, [isDropdownOpen]);

    const handleLogout = () => {
      logout();
      navigate('/login');
    };

    return (
      <header
        ref={ref}
        className={cn(
          'h-16 bg-card border-b border-border px-4 flex items-center justify-between',
          className
        )}
        {...props}
      >
        <div className="flex items-center gap-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={onMenuClick}
            className="md:hidden"
          >
            <Icon icon={Menu} size="sm" />
          </Button>
          <h1 className="text-xl font-semibold">ProResponse AI</h1>
        </div>

        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm" className="relative">
            <Icon icon={Bell} size="sm" />
            {notificationCount > 0 && (
              <span className="absolute -top-1 -right-1 h-5 w-5 rounded-full bg-destructive text-destructive-foreground text-xs flex items-center justify-center">
                {notificationCount}
              </span>
            )}
          </Button>
          
          {user ? (
            <div className="relative" ref={dropdownRef}>
              <Button 
                variant="ghost" 
                size="sm" 
                className="gap-2"
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              >
                <Avatar
                  src={user.avatar}
                  alt={user.name}
                  fallback={user.initials}
                  size="sm"
                />
                <span className="hidden sm:inline">{user.name}</span>
              </Button>
              
              {isDropdownOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-card border border-border rounded-md shadow-lg py-1 z-50">
                  <button
                    onClick={handleLogout}
                    className="w-full px-4 py-2 text-sm text-left hover:bg-accent hover:text-accent-foreground flex items-center gap-2 transition-colors"
                  >
                    <Icon icon={LogOut} size="sm" />
                    Log out
                  </button>
                </div>
              )}
            </div>
          ) : (
            <Button variant="ghost" size="sm">
              <Icon icon={User} size="sm" />
            </Button>
          )}
        </div>
      </header>
    );
  }
);

Header.displayName = 'Header';
</file>

<file path="src/components/organisms/index.ts">
export { Header } from './Header';
export { ThreadList } from './ThreadList';
export { ThreadDetail } from './ThreadDetail';
export { AgentPanel } from './AgentPanel';
export { Composer } from './Composer';

export type { HeaderProps } from './Header';
export type { ThreadListProps } from './ThreadList';
export type { ThreadDetailProps, EmailMessage } from './ThreadDetail';
export type { AgentPanelProps } from './AgentPanel';
export type { ComposerProps } from './Composer';
</file>

<file path="src/components/organisms/ThreadDetail.tsx">
import React from 'react';
import { Reply } from 'lucide-react';
import { Avatar } from '../atoms/Avatar';
import { Badge } from '../atoms/Badge';
import { Button } from '../atoms/Button';
import { Icon } from '../atoms/Icon';
import { cn } from '../../lib/utils';

export interface EmailMessage {
  id: string;
  author: {
    name: string;
    email: string;
    avatar?: string;
    initials?: string;
  };
  content: string;
  timestamp: string;
  isSupport?: boolean;
}

export interface ThreadDetailProps extends React.HTMLAttributes<HTMLDivElement> {
  subject: string;
  messages: EmailMessage[];
  status?: 'open' | 'closed' | 'pending';
  tags?: string[];
  onReply?: () => void;
}

export const ThreadDetail = React.forwardRef<HTMLDivElement, ThreadDetailProps>(
  ({ className, subject, messages, status = 'open', tags = [], onReply, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('flex flex-col h-full', className)}
        {...props}
      >
        <div className="px-6 py-4 border-b border-border">
          <div className="flex items-start justify-between gap-4">
            <div>
              <h2 className="text-xl font-semibold mb-2">{subject}</h2>
              <div className="flex gap-2">
                {status && (
                  <Badge
                    variant={status === 'closed' ? 'secondary' : 'default'}
                  >
                    {status}
                  </Badge>
                )}
                {tags.map((tag) => (
                  <Badge key={tag} variant="outline">
                    {tag}
                  </Badge>
                ))}
              </div>
            </div>
            <Button
              onClick={onReply}
              size="sm"
              className="gap-2"
            >
              <Icon icon={Reply} size="sm" />
              <span>Reply</span>
            </Button>
          </div>
        </div>

        <div className="flex-1 overflow-y-auto px-6 py-4 space-y-6">
          {messages.map((message) => (
            <article key={message.id} className="space-y-3">
              <div className="flex items-start gap-3">
                <Avatar
                  src={message.author.avatar}
                  alt={message.author.name}
                  fallback={message.author.initials}
                />
                <div className="flex-1">
                  <div className="flex items-baseline gap-2 mb-1">
                    <span className="font-semibold">{message.author.name}</span>
                    <span className="text-sm text-secondary-foreground">
                      {message.author.email}
                    </span>
                    <time className="text-sm text-secondary-foreground ml-auto">
                      {message.timestamp}
                    </time>
                  </div>
                  <div className={cn(
                    'rounded-lg p-4',
                    message.isSupport 
                      ? 'bg-accent border border-accent-foreground/20' 
                      : 'bg-card border border-border'
                  )}>
                    <div className="prose prose-sm max-w-none">
                      {message.content.split('\n').map((paragraph, idx) => (
                        <p key={idx} className="mb-2 last:mb-0">
                          {paragraph}
                        </p>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>
    );
  }
);

ThreadDetail.displayName = 'ThreadDetail';
</file>

<file path="src/components/organisms/ThreadList.tsx">
import React from 'react';
import { SearchInput } from '../molecules/SearchInput';
import { FilterPills, type FilterOption } from '../molecules/FilterPills';
import { ThreadPreview, type ThreadPreviewProps } from '../molecules/ThreadPreview';
import { cn } from '../../lib/utils';

export interface ThreadListProps extends React.HTMLAttributes<HTMLDivElement> {
  threads: ThreadPreviewProps[];
  filters?: FilterOption[];
  activeFilter?: string;
  activeThreadId?: string;
  searchValue?: string;
  onSearchChange?: (value: string) => void;
  onFilterChange?: (filterId: string) => void;
  onThreadClick?: (threadId: string) => void;
}

export const ThreadList = React.forwardRef<HTMLDivElement, ThreadListProps>(
  ({ 
    className, 
    threads, 
    filters = [],
    activeFilter,
    activeThreadId,
    searchValue,
    onSearchChange,
    onFilterChange,
    onThreadClick,
    ...props 
  }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'flex flex-col h-full bg-card',
          className
        )}
        {...props}
      >
        <div className="p-4 border-b border-border space-y-3">
          <SearchInput
            placeholder="Search threads..."
            value={searchValue}
            onChange={(e) => onSearchChange?.(e.target.value)}
          />
          {filters.length > 0 && (
            <FilterPills
              options={filters}
              value={activeFilter}
              onValueChange={onFilterChange}
            />
          )}
        </div>
        
        <div className="flex-1 overflow-y-auto">
          {threads.map((thread, index) => (
            <ThreadPreview
              key={thread.id || index}
              {...thread}
              isActive={thread.id === activeThreadId}
              onClick={() => thread.id && onThreadClick?.(thread.id)}
            />
          ))}
          {threads.length === 0 && (
            <div className="p-8 text-center text-secondary-foreground">
              No threads found
            </div>
          )}
        </div>
      </div>
    );
  }
);

ThreadList.displayName = 'ThreadList';
</file>

<file path="src/components/templates/AppLayout.tsx">
import React from 'react';
import { cn } from '../../lib/utils';

export interface AppLayoutProps extends React.HTMLAttributes<HTMLDivElement> {
  header?: React.ReactNode;
  sidebar?: React.ReactNode;
  main?: React.ReactNode;
  panel?: React.ReactNode;
}

export const AppLayout = React.forwardRef<HTMLDivElement, AppLayoutProps>(
  ({ className, header, sidebar, main, panel, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('h-screen flex flex-col bg-background', className)}
        {...props}
      >
        {header && <div className="flex-shrink-0">{header}</div>}
        
        <div className="flex-1 flex overflow-hidden">
          {sidebar && (
            <aside className="w-80 flex-shrink-0 border-r border-border overflow-hidden">
              {sidebar}
            </aside>
          )}
          
          {main && (
            <main className="flex-1 flex flex-col overflow-hidden">
              {main}
            </main>
          )}
          
          {panel && (
            <aside className="w-80 flex-shrink-0 border-l border-border overflow-hidden">
              {panel}
            </aside>
          )}
        </div>
      </div>
    );
  }
);

AppLayout.displayName = 'AppLayout';
</file>

<file path="src/components/templates/AuthLayout.tsx">
import React from 'react';
import { cn } from '../../lib/utils';

export interface AuthLayoutProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode;
}

export const AuthLayout = React.forwardRef<HTMLDivElement, AuthLayoutProps>(
  ({ className, children, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'min-h-screen bg-background flex items-center justify-center p-4',
          className
        )}
        {...props}
      >
        <div className="w-full max-w-md">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold">ProResponse AI</h1>
            <p className="text-secondary-foreground mt-2">
              AI-powered support assistant
            </p>
          </div>
          {children}
        </div>
      </div>
    );
  }
);

AuthLayout.displayName = 'AuthLayout';
</file>

<file path="src/components/templates/index.ts">
export { AuthLayout } from './AuthLayout';
export { AppLayout } from './AppLayout';

export type { AuthLayoutProps } from './AuthLayout';
export type { AppLayoutProps } from './AppLayout';
</file>

<file path="src/components/ProtectedRoute.tsx">
/*
// TODO: 
// Remove auth store; using stack handler instead
*/

import { Navigate, Outlet } from 'react-router-dom';
// import { useAuthStore } from '../stores/auth-store';
import { useStackApp } from '@stackframe/react';

export function ProtectedRoute() {
  // const isAuthenticated = useAuthStore((state) => state.isAuthenticated);
  const app = useStackApp();
  const user = app.useUser();

  if (!user) {
    return <Navigate to="/handler/sign-in" replace />;
  }
  // return <div>{user.displayName}</div>;
  // if (!isAuthenticated) {
  //   return <Navigate to="/login" replace />;
  // }

  return <Outlet />;
}
</file>

<file path="src/containers/AgentPanelContainer.tsx">
import { useAgentActivity } from '../repo/hooks';
import { useUIStore } from '../stores/ui-store';
import { AgentPanel } from '../components/organisms';
import { FileSearch, Brain, MessageSquare } from 'lucide-react';
import type { AgentActionProps } from '../components/molecules/AgentAction';

export function AgentPanelContainer() {
  const selectedThreadId = useUIStore((state) => state.selectedThreadId);
  const isAgentPanelOpen = useUIStore((state) => state.isAgentPanelOpen);
  
  const { data: agentActivity } = useAgentActivity(selectedThreadId || '');
  
  if (!isAgentPanelOpen || !selectedThreadId) {
    return null;
  }
  
  // Transform agent activity data to match component props
  const actions: AgentActionProps[] = agentActivity?.actions.map(action => ({
    icon: action.type === 'analyze' ? Brain : action.type === 'search' ? FileSearch : MessageSquare,
    title: action.title,
    description: action.description,
    timestamp: new Date(action.timestamp).toLocaleTimeString(),
    status: action.status === 'completed' ? 'completed' : action.status === 'failed' ? 'failed' : 'pending'
  })) || [];
  
  return (
    <AgentPanel
      actions={actions}
      analysis={agentActivity?.analysis}
      draftResponse={agentActivity?.suggested_response}
    />
  );
}
</file>

<file path="src/containers/AuthContainer.tsx">
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../stores/auth-store';
import { Input, Label } from '../components/atoms';
import { Button } from '../components/atoms';

export function AuthContainer() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  
  const login = useAuthStore((state) => state.login);
  const navigate = useNavigate();
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);
    
    try {
      await login(email);
      navigate('/');
    } catch {
      setError('Login failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <div className="w-full max-w-sm">
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Welcome back</h1>
          <p className="text-gray-600">Sign in to your ProResponse AI account</p>
        </div>
        
        {error && (
          <div className="bg-red-50 text-red-600 p-3 rounded-md text-sm">
            {error}
          </div>
        )}
        
        <div className="space-y-4">
          <div>
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="you@example.com"
              required
            />
          </div>
          
          <div>
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="••••••••"
              required
            />
          </div>
        </div>

        <Button
          type="submit"
          className="w-full"
          disabled={isLoading}
        >
          {isLoading ? 'Signing in...' : 'Sign in'}
        </Button>
        
        <p className="text-center text-sm text-gray-600">
          For demo purposes, use any email and password
        </p>
      </form>
    </div>
  );
}
</file>

<file path="src/containers/ComposerContainer.tsx">
import React, { useEffect, useState } from 'react';
import { useUIStore } from '../stores/ui-store';
import { useComposerStore } from '../stores/composer-store';
import { useDraft, useUpdateDraft, useSendMessage, useRegenerateDraft } from '../repo/hooks';
import { Composer } from '../components/organisms';

export function ComposerContainer() {
  const selectedThreadId = useUIStore((state) => state.selectedThreadId);
  const isComposerOpen = useUIStore((state) => state.isComposerOpen);
  const setComposerOpen = useUIStore((state) => state.setComposerOpen);
  
  const getDraft = useComposerStore((state) => state.getDraft);
  const setDraft = useComposerStore((state) => state.setDraft);
  const clearDraft = useComposerStore((state) => state.clearDraft);
  
  const { data: serverDraft } = useDraft(selectedThreadId || '');
  const updateDraftMutation = useUpdateDraft();
  const sendMessageMutation = useSendMessage();
  const regenerateDraftMutation = useRegenerateDraft();
  
  const [localContent, setLocalContent] = useState('');
  
  // Initialize content from server draft or local draft
  useEffect(() => {
    if (selectedThreadId) {
      const localDraft = getDraft(selectedThreadId);
      if (localDraft) {
        setLocalContent(localDraft);
      } else if (serverDraft) {
        setLocalContent(serverDraft.content);
      }
    }
  }, [selectedThreadId, serverDraft, getDraft]);
  
  const handleContentChange = (content: string) => {
    setLocalContent(content);
    if (selectedThreadId) {
      setDraft(selectedThreadId, content);
    }
  };
  
  const handleSend = async () => {
    if (!selectedThreadId || !localContent.trim()) return;
    
    try {
      await sendMessageMutation.mutateAsync({
        threadId: selectedThreadId,
        content: localContent,
      });
      
      // Clear draft after sending
      clearDraft(selectedThreadId);
      setLocalContent('');
      setComposerOpen(false);
    } catch (error) {
      console.error('Failed to send message:', error);
    }
  };
  
  const handleSaveDraft = async () => {
    if (!selectedThreadId) return;
    
    try {
      await updateDraftMutation.mutateAsync({
        threadId: selectedThreadId,
        content: localContent,
      });
    } catch (error) {
      console.error('Failed to save draft:', error);
    }
  };
  
  const handleCancel = () => {
    setComposerOpen(false);
  };
  
  const handleRegenerate = async () => {
    if (!selectedThreadId) return;
    
    try {
      await regenerateDraftMutation.mutateAsync({
        threadId: selectedThreadId,
      });
      
      // The draft will be updated via React Query cache invalidation
      // and will trigger the useEffect above to update local content
    } catch (error) {
      console.error('Failed to regenerate draft:', error);
    }
  };
  
  if (!isComposerOpen || !selectedThreadId) {
    return null;
  }
  
  return (
    <Composer
      value={localContent}
      onChange={handleContentChange}
      onSend={handleSend}
      onCancel={handleCancel}
      onSaveDraft={handleSaveDraft}
      onRegenerate={handleRegenerate}
      isGenerating={regenerateDraftMutation.isPending}
      isSending={sendMessageMutation.isPending}
      isSavingDraft={updateDraftMutation.isPending}
    />
  );
}
</file>

<file path="src/containers/index.ts">
export { AuthContainer } from './AuthContainer';
export { ThreadListContainer } from './ThreadListContainer';
export { ThreadDetailContainer } from './ThreadDetailContainer';
export { ComposerContainer } from './ComposerContainer';
export { AgentPanelContainer } from './AgentPanelContainer';
</file>

<file path="src/containers/ThreadDetailContainer.tsx">
import { useThread } from '../repo/hooks';
import { useUIStore } from '../stores/ui-store';
import { ThreadDetail, type EmailMessage } from '../components/organisms';
import { ComposerContainer } from './ComposerContainer';

export function ThreadDetailContainer() {
  const selectedThreadId = useUIStore((state) => state.selectedThreadId);
  const setComposerOpen = useUIStore((state) => state.setComposerOpen);
  
  const { data: thread, isLoading, error } = useThread(selectedThreadId || '');
  
  if (!selectedThreadId) {
    return (
      <div className="flex items-center justify-center h-full text-gray-500">
        Select a thread to view details
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="p-4 text-red-600">
        Error loading thread: {(error as Error).message}
      </div>
    );
  }
  
  if (isLoading || !thread) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="animate-pulse text-gray-500">Loading thread...</div>
      </div>
    );
  }
  
  // Transform emails to EmailMessage format
  const messages: EmailMessage[] = thread.emails.map(email => ({
    id: email.id,
    author: {
      name: email.from_name,
      email: email.from_email,
      initials: email.from_name.split(' ').map(n => n[0]).join('').toUpperCase()
    },
    content: email.content,
    timestamp: new Date(email.timestamp).toLocaleString([], {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }),
    isSupport: email.is_support_reply
  }));
  
  const handleReply = () => {
    setComposerOpen(true, 'reply');
  };
  
  return (
    <div className="flex flex-col h-full">
      <ThreadDetail
        subject={thread.subject}
        messages={messages}
        status={thread.status as 'open' | 'closed' | 'pending'}
        tags={thread.tags}
        onReply={handleReply}
      />
      <ComposerContainer />
    </div>
  );
}
</file>

<file path="src/containers/ThreadListContainer.tsx">
import { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useThreads, useThreadCounts } from '../repo/hooks';
import { useUIStore } from '../stores/ui-store';
import { ThreadList } from '../components/organisms';
import type { ThreadFilter } from '../types/api';
import type { ThreadPreviewProps } from '../components/molecules/ThreadPreview';

export function ThreadListContainer() {
  const navigate = useNavigate();
  const threadFilter = useUIStore((state) => state.threadFilter);
  const searchQuery = useUIStore((state) => state.searchQuery);
  const selectedThreadId = useUIStore((state) => state.selectedThreadId);
  const setThreadFilter = useUIStore((state) => state.setThreadFilter);
  const setSearchQuery = useUIStore((state) => state.setSearchQuery);
  
  // Local search state for immediate UI updates
  const [localSearchValue, setLocalSearchValue] = useState(searchQuery);
  
  // Debounce search query updates
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      setSearchQuery(localSearchValue);
    }, 300); // 300ms debounce
    
    return () => clearTimeout(timeoutId);
  }, [localSearchValue, setSearchQuery]);
  
  const { data: threadsData } = useThreads(threadFilter, searchQuery);
  const { data: counts } = useThreadCounts();
  
  const handleSearchChange = useCallback((value: string) => {
    setLocalSearchValue(value);
  }, []);
  
  const handleThreadClick = useCallback((threadId: string) => {
    navigate(`/thread/${threadId}`);
  }, [navigate]);
  
  // Transform API threads to ThreadPreviewProps
  const threadPreviews: ThreadPreviewProps[] = threadsData?.threads.map(thread => ({
    id: thread.id,
    title: thread.subject,
    snippet: thread.snippet,
    author: {
      name: thread.customer_name,
      initials: thread.customer_name.split(' ').map(n => n[0]).join('').toUpperCase()
    },
    timestamp: new Date(thread.timestamp).toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    }),
    isActive: thread.id === selectedThreadId,
    isUnread: thread.is_unread,
    badges: [
      ...(thread.status !== 'open' ? [{ 
        label: thread.status, 
        variant: thread.status === 'closed' ? 'secondary' : 'default' as const 
      }] : []),
      ...thread.tags.map(tag => ({ 
        label: tag, 
        variant: tag === 'urgent' ? 'destructive' : 'outline' as const 
      }))
    ]
  })) || [];
  
  const filterOptions = [
    { id: 'all', label: 'All', count: counts?.all },
    { id: 'unread', label: 'Unread', count: counts?.unread },
    { id: 'flagged', label: 'Flagged', count: counts?.flagged },
    { id: 'urgent', label: 'Urgent', count: counts?.urgent },
    { id: 'awaiting_customer', label: 'Awaiting Customer', count: counts?.awaiting_customer },
    { id: 'closed', label: 'Closed', count: counts?.closed },
  ];
  
  return (
    <ThreadList
      threads={threadPreviews}
      filters={filterOptions}
      activeFilter={threadFilter}
      activeThreadId={selectedThreadId}
      searchValue={localSearchValue}
      onSearchChange={handleSearchChange}
      onFilterChange={(filterId) => setThreadFilter(filterId as ThreadFilter)}
      onThreadClick={handleThreadClick}
    />
  );
}
</file>

<file path="src/lib/stack.ts">
import { StackClientApp } from '@stackframe/react';
import { useNavigate } from 'react-router-dom';

export const stackClientApp = new StackClientApp({
projectId: import.meta.env.VITE_STACK_PROJECT_ID,
publishableClientKey: import.meta.env.VITE_STACK_PUBLISHABLE_CLIENT_KEY,
tokenStore: 'cookie',
redirectMethod: { useNavigate },
});
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="src/pages/InboxPage.tsx">
import { useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { AppLayout } from '../components/templates';
import { Header } from '../components/organisms';
import { ThreadListContainer } from '../containers/ThreadListContainer';
import { ThreadDetailContainer } from '../containers/ThreadDetailContainer';
import { AgentPanelContainer } from '../containers/AgentPanelContainer';
import { useAuthStore } from '../stores/auth-store';
import { useUIStore } from '../stores/ui-store';

export function InboxPage() {
  const { threadId } = useParams<{ threadId?: string }>();
  const user = useAuthStore((state) => state.user);
  const isAgentPanelOpen = useUIStore((state) => state.isAgentPanelOpen);
  const setSelectedThread = useUIStore((state) => state.setSelectedThread);
  
  // Sync URL to store - single source of truth is the URL
  useEffect(() => {
    if (threadId) {
      setSelectedThread(threadId);
    } else {
      setSelectedThread(null);
    }
  }, [threadId, setSelectedThread]);
  
  return (
    <AppLayout
      header={
        <Header
          user={user ? { 
            name: user.name,
            initials: user.name.split(' ').map(n => n[0]).join('').toUpperCase()
          } : undefined}
        />
      }
      sidebar={<ThreadListContainer />}
      main={<ThreadDetailContainer />}
      panel={isAgentPanelOpen ? <AgentPanelContainer /> : null}
    />
  );
}
</file>

<file path="src/pages/index.ts">
export { LoginPage } from './LoginPage';
export { InboxPage } from './InboxPage';
</file>

<file path="src/pages/LoginPage.tsx">
import { Navigate } from 'react-router-dom';
import { useAuthStore } from '../stores/auth-store';
import { AuthLayout } from '../components/templates';
import { AuthContainer } from '../containers/AuthContainer';

export function LoginPage() {
  const isAuthenticated = useAuthStore((state) => state.isAuthenticated);
  
  if (isAuthenticated) {
    return <Navigate to="/" replace />;
  }
  
  return (
    <AuthLayout>
      <AuthContainer />
    </AuthLayout>
  );
}
</file>

<file path="src/repo/api-client.ts">
import type { Thread, ThreadDetail, Draft, AgentActivityDetail, ThreadCounts, ThreadFilter } from '../types/api';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

class APIError extends Error {
  constructor(public status: number, message: string) {
    super(message);
    this.name = 'APIError';
  }
}

async function fetchAPI<T>(endpoint: string, options?: RequestInit): Promise<T> {
  const url = `${API_BASE_URL}${endpoint}`;
  
  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
      credentials: 'include', // For CORS with cookies
    });
    
    if (!response.ok) {
      const error = await response.json().catch(() => ({ error: { message: 'Unknown error' } }));
      throw new APIError(response.status, error.error?.message || 'Request failed');
    }
    
    return await response.json();
  } catch (error) {
    if (error instanceof APIError) {
      throw error;
    }
    throw new Error(`Network error: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

export class APIClient {
  // Thread endpoints
  static async getThreads(filter?: ThreadFilter, search?: string): Promise<{ threads: Thread[] }> {
    const params = new URLSearchParams();
    if (filter) params.append('filter', filter);
    if (search) params.append('search', search);
    
    const query = params.toString() ? `?${params.toString()}` : '';
    return fetchAPI<{ threads: Thread[] }>(`/api/threads${query}`);
  }

  static async getThread(id: string): Promise<ThreadDetail> {
    return fetchAPI<ThreadDetail>(`/api/threads/${id}`);
  }

  static async updateThread(id: string, updates: { status?: string; tags?: string[] }): Promise<{ id: string; status: string; tags: string[] }> {
    return fetchAPI<{ id: string; status: string; tags: string[] }>(`/api/threads/${id}`, {
      method: 'PATCH',
      body: JSON.stringify(updates),
    });
  }

  // Message endpoints
  static async sendMessage(threadId: string, content: string) {
    return fetchAPI(`/api/threads/${threadId}/messages`, {
      method: 'POST',
      body: JSON.stringify({ content }),
    });
  }

  static async getDraft(threadId: string): Promise<Draft> {
    return fetchAPI<Draft>(`/api/threads/${threadId}/draft`);
  }

  static async updateDraft(threadId: string, content: string): Promise<Draft> {
    return fetchAPI<Draft>(`/api/threads/${threadId}/draft`, {
      method: 'PUT',
      body: JSON.stringify({ content }),
    });
  }

  // Agent endpoints
  static async getAgentActivity(threadId: string): Promise<AgentActivityDetail> {
    return fetchAPI<AgentActivityDetail>(`/api/threads/${threadId}/agent-activity`);
  }

  static async regenerateDraft(threadId: string, instructions?: string): Promise<{ status: string; message: string }> {
    return fetchAPI<{ status: string; message: string }>(`/api/threads/${threadId}/regenerate`, {
      method: 'POST',
      body: JSON.stringify({ instructions }),
    });
  }

  // Filter counts
  static async getThreadCounts(): Promise<ThreadCounts> {
    return fetchAPI<ThreadCounts>('/api/threads/counts');
  }
}
</file>

<file path="src/repo/hooks.ts">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { APIClient } from './api-client';
import type { ThreadFilter } from '../types/api';

// Query keys
export const queryKeys = {
  threads: (filter?: ThreadFilter, search?: string) => ['threads', filter, search] as const,
  thread: (id: string) => ['thread', id] as const,
  draft: (threadId: string) => ['draft', threadId] as const,
  agentActivity: (threadId: string) => ['agentActivity', threadId] as const,
  threadCounts: ['threadCounts'] as const,
};

// Thread queries
export function useThreads(filter?: ThreadFilter, search?: string) {
  return useQuery({
    queryKey: queryKeys.threads(filter, search),
    queryFn: () => APIClient.getThreads(filter, search),
    placeholderData: (previousData) => previousData,
  });
}

export function useThread(id: string) {
  return useQuery({
    queryKey: queryKeys.thread(id),
    queryFn: () => APIClient.getThread(id),
    enabled: !!id,
  });
}

export function useThreadCounts() {
  return useQuery({
    queryKey: queryKeys.threadCounts,
    queryFn: () => APIClient.getThreadCounts(),
    refetchInterval: 30000, // Refetch every 30 seconds
  });
}

// Draft queries
export function useDraft(threadId: string) {
  return useQuery({
    queryKey: queryKeys.draft(threadId),
    queryFn: () => APIClient.getDraft(threadId),
    enabled: !!threadId,
  });
}

// Agent queries
export function useAgentActivity(threadId: string) {
  return useQuery({
    queryKey: queryKeys.agentActivity(threadId),
    queryFn: () => APIClient.getAgentActivity(threadId),
    enabled: !!threadId,
  });
}

// Mutations
export function useUpdateThread() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: { status?: string; tags?: string[] } }) =>
      APIClient.updateThread(id, updates),
    onSuccess: (data, variables) => {
      // Invalidate and refetch thread data
      queryClient.invalidateQueries({ queryKey: queryKeys.thread(variables.id) });
      queryClient.invalidateQueries({ queryKey: queryKeys.threads() });
      queryClient.invalidateQueries({ queryKey: queryKeys.threadCounts });
    },
  });
}

export function useSendMessage() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ threadId, content }: { threadId: string; content: string }) =>
      APIClient.sendMessage(threadId, content),
    onSuccess: (data, variables) => {
      // Invalidate thread to refetch with new message
      queryClient.invalidateQueries({ queryKey: queryKeys.thread(variables.threadId) });
      queryClient.invalidateQueries({ queryKey: queryKeys.threads() });
    },
  });
}

export function useUpdateDraft() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ threadId, content }: { threadId: string; content: string }) =>
      APIClient.updateDraft(threadId, content),
    onSuccess: (data, variables) => {
      // Update the draft in cache
      queryClient.setQueryData(queryKeys.draft(variables.threadId), data);
    },
  });
}

export function useRegenerateDraft() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ threadId, instructions }: { threadId: string; instructions?: string }) =>
      APIClient.regenerateDraft(threadId, instructions),
    onSuccess: (data, variables) => {
      // Invalidate draft and agent activity
      queryClient.invalidateQueries({ queryKey: queryKeys.draft(variables.threadId) });
      queryClient.invalidateQueries({ queryKey: queryKeys.agentActivity(variables.threadId) });
      queryClient.invalidateQueries({ queryKey: queryKeys.thread(variables.threadId) });
    },
  });
}
</file>

<file path="src/repo/mock-api.ts">
import type { Thread, ThreadDetail, Draft, AgentActivityDetail, ThreadCounts, ThreadFilter } from '../types/api';
import { 
  mockThreads, 
  generateMockThreadDetail, 
  generateMockDraft, 
  generateMockAgentActivity,
  generateMockThreadCounts 
} from './mock-data';

// Simulate network delay
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// In-memory storage for thread state
const threadStore = new Map<string, ThreadDetail>();
const draftStore = new Map<string, Draft>();

// Initialize with mock data
mockThreads.forEach(thread => {
  const detail = generateMockThreadDetail(thread);
  threadStore.set(thread.id, detail);
  draftStore.set(thread.id, generateMockDraft(thread.id));
});

export class MockAPI {
  // Thread endpoints
  static async getThreads(filter?: ThreadFilter, search?: string): Promise<{ threads: Thread[] }> {
    await delay(100);
    
    let threads = [...mockThreads];
    
    // Apply filter
    if (filter && filter !== 'all') {
      threads = threads.filter(thread => {
        switch (filter) {
          case 'unread':
            return thread.is_unread;
          case 'flagged':
            return thread.tags.includes('flagged');
          case 'urgent':
            return thread.tags.includes('urgent');
          case 'awaiting_customer':
            return thread.status === 'pending';
          case 'closed':
            return thread.status === 'closed';
          default:
            return true;
        }
      });
    }
    
    // Apply search
    if (search) {
      const searchLower = search.toLowerCase();
      threads = threads.filter(thread => 
        thread.subject.toLowerCase().includes(searchLower) ||
        thread.snippet.toLowerCase().includes(searchLower) ||
        thread.customer_name.toLowerCase().includes(searchLower)
      );
    }
    
    return { threads };
  }

  static async getThread(id: string): Promise<ThreadDetail> {
    await delay(200);
    
    const thread = threadStore.get(id);
    if (!thread) {
      throw new Error('Thread not found');
    }
    
    return thread;
  }

  static async updateThread(id: string, updates: { status?: string; tags?: string[] }): Promise<{ id: string; status: string; tags: string[] }> {
    await delay(200);
    
    const thread = threadStore.get(id);
    if (!thread) {
      throw new Error('Thread not found');
    }
    
    if (updates.status) {
      thread.status = updates.status;
    }
    if (updates.tags) {
      thread.tags = updates.tags;
    }
    
    // Update the mock thread as well
    const mockThread = mockThreads.find(t => t.id === id);
    if (mockThread) {
      if (updates.status) mockThread.status = updates.status;
      if (updates.tags) mockThread.tags = updates.tags;
    }
    
    return {
      id: thread.id,
      status: thread.status,
      tags: thread.tags
    };
  }

  // Message endpoints
  static async sendMessage(threadId: string, content: string) {
    await delay(500);
    
    const thread = threadStore.get(threadId);
    if (!thread) {
      throw new Error('Thread not found');
    }
    
    const newMessage = {
      id: Math.random().toString(36).substring(2, 11),
      thread_id: threadId,
      from_name: 'Support Team',
      from_email: 'support@proresponse.ai',
      content,
      timestamp: new Date().toISOString(),
      is_support_reply: true
    };
    
    thread.emails.push(newMessage);
    
    // Update thread status to open if it was closed
    if (thread.status === 'closed') {
      thread.status = 'open';
    }
    
    return newMessage;
  }

  static async getDraft(threadId: string): Promise<Draft> {
    await delay(200);
    
    const draft = draftStore.get(threadId);
    if (!draft) {
      throw new Error('Draft not found');
    }
    
    return draft;
  }

  static async updateDraft(threadId: string, content: string): Promise<Draft> {
    await delay(200);
    
    if (!threadStore.has(threadId)) {
      throw new Error('Thread not found');
    }
    
    const draft: Draft = {
      content,
      last_updated: new Date().toISOString(),
      is_agent_generated: false
    };
    
    draftStore.set(threadId, draft);
    
    return draft;
  }

  // Agent endpoints
  static async getAgentActivity(threadId: string): Promise<AgentActivityDetail> {
    await delay(300);
    
    if (!threadStore.has(threadId)) {
      throw new Error('Thread not found');
    }
    
    return generateMockAgentActivity();
  }

  static async regenerateDraft(threadId: string, instructions?: string): Promise<{ status: string; message: string }> {
    await delay(1500); // Simulate longer processing time
    
    if (!threadStore.has(threadId)) {
      throw new Error('Thread not found');
    }
    
    // Generate new draft
    const newDraft = generateMockDraft();
    if (instructions) {
      newDraft.content = `Based on your instructions: "${instructions}"\n\n${newDraft.content}`;
    }
    draftStore.set(threadId, newDraft);
    
    // Update agent activity
    const thread = threadStore.get(threadId)!;
    thread.agent_activity.draft_response = newDraft.content;
    thread.agent_activity.actions.push({
      id: Math.random().toString(36).substring(2, 11),
      type: 'regenerate',
      title: 'Regenerated draft response',
      description: instructions ? `With custom instructions: ${instructions}` : 'Using default parameters',
      timestamp: new Date().toISOString(),
      status: 'completed'
    });
    
    return {
      status: 'success',
      message: 'Draft regenerated successfully'
    };
  }

  // Filter counts
  static async getThreadCounts(): Promise<ThreadCounts> {
    await delay(100);
    return generateMockThreadCounts(mockThreads);
  }
}
</file>

<file path="src/repo/mock-data.ts">
import type { Thread, ThreadDetail, Draft, AgentActivityDetail, ThreadCounts, Email, AgentAction } from '../types/api';

const firstNames = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emily', 'Robert', 'Lisa', 'James', 'Mary'];
const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez'];
const domains = ['gmail.com', 'yahoo.com', 'outlook.com', 'company.com', 'business.net'];

const subjects = [
  'Unable to access my account',
  'Billing question about recent charge',
  'Feature request: Dark mode',
  'Great job with the recent update!',
  'Bug report: Application crashes on startup',
  'How do I export my data?',
  'Password reset not working',
  'Integration with third-party service',
  'Performance issues with large datasets',
  'Thank you for the excellent support!'
];

const emailBodies = [
  'I\'ve been trying to log into my account for the past hour, but I keep getting an error message. Can you help me resolve this issue?',
  'I noticed a charge on my credit card that I don\'t recognize. Could you please provide more details about this transaction?',
  'Your product is great, but it would be even better with a dark mode option. Are there any plans to add this feature?',
  'Just wanted to say that the recent update has made a huge difference in my workflow. Keep up the excellent work!',
  'The application crashes every time I try to open a specific file. I\'ve attached the error log for your reference.',
  'I need to export all my data for a presentation. What\'s the best way to do this?',
  'I requested a password reset email but haven\'t received it yet. I\'ve checked my spam folder as well.',
  'We\'re looking to integrate your service with our CRM system. Do you have an API available?',
  'The application becomes very slow when working with datasets larger than 10,000 rows. Is this a known issue?',
  'Your support team went above and beyond to help me. I really appreciate the excellent service!'
];

const agentAnalyses = [
  'Customer is experiencing authentication issues. This appears to be a common login problem that might be resolved by clearing browser cache or resetting password.',
  'Customer is inquiring about a billing charge. Need to verify the transaction details and provide clarification.',
  'Feature request for dark mode. This is a popular request that we should consider for future updates.',
  'Positive feedback from satisfied customer. Should respond with appreciation and encourage continued engagement.',
  'Technical issue reported. Customer is experiencing application crashes that need immediate attention.',
  'Customer needs help with data export functionality. Should provide step-by-step instructions.',
  'Password reset email delivery issue. Need to check email service and provide alternative reset method.',
  'Integration request from potential enterprise customer. Should provide API documentation and support.',
  'Performance issue with large datasets. Known limitation that engineering team is working on.',
  'Positive feedback about support experience. Should thank customer and maintain relationship.'
];

function randomElement<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function generateId(): string {
  return Math.random().toString(36).substring(2, 11);
}

function generateTimestamp(daysAgo: number = 0): string {
  const date = new Date();
  date.setDate(date.getDate() - daysAgo);
  date.setHours(date.getHours() - Math.floor(Math.random() * 24));
  return date.toISOString();
}

function generateCustomerName(): { name: string; email: string } {
  const firstName = randomElement(firstNames);
  const lastName = randomElement(lastNames);
  const domain = randomElement(domains);
  return {
    name: `${firstName} ${lastName}`,
    email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`
  };
}

export function generateMockThread(index: number): Thread {
  const customer = generateCustomerName();
  const daysAgo = Math.floor(Math.random() * 7);
  const isUnread = Math.random() > 0.7;
  const statuses = ['open', 'closed', 'pending'];
  const allTags = ['urgent', 'bug', 'feature-request', 'billing', 'positive-feedback'];
  
  const tags: string[] = [];
  if (Math.random() > 0.7) tags.push(randomElement(allTags));
  if (Math.random() > 0.8) tags.push('urgent');

  return {
    id: generateId(),
    subject: subjects[index % subjects.length],
    snippet: emailBodies[index % emailBodies.length].substring(0, 100) + '...',
    customer_name: customer.name,
    customer_email: customer.email,
    timestamp: generateTimestamp(daysAgo),
    is_unread: isUnread,
    status: randomElement(statuses),
    tags
  };
}

export function generateMockThreadDetail(thread: Thread): ThreadDetail {
  const emails: Email[] = [];
  const actions: AgentAction[] = [];
  
  // Generate initial customer email
  emails.push({
    id: generateId(),
    from_name: thread.customer_name,
    from_email: thread.customer_email,
    content: emailBodies[Math.floor(Math.random() * emailBodies.length)],
    timestamp: thread.timestamp,
    is_support_reply: false
  });

  // Generate agent actions
  actions.push({
    id: generateId(),
    type: 'analyze',
    title: 'Analyzed email content',
    description: 'Performed sentiment analysis and categorization',
    timestamp: new Date(new Date(thread.timestamp).getTime() + 60000).toISOString(),
    status: 'completed'
  });

  actions.push({
    id: generateId(),
    type: 'search',
    title: 'Searched knowledge base',
    description: 'Found 3 relevant articles',
    timestamp: new Date(new Date(thread.timestamp).getTime() + 120000).toISOString(),
    status: 'completed',
    result: { articles_found: 3 }
  });

  actions.push({
    id: generateId(),
    type: 'draft',
    title: 'Generated response draft',
    description: 'Created initial response based on knowledge base',
    timestamp: new Date(new Date(thread.timestamp).getTime() + 180000).toISOString(),
    status: 'completed'
  });

  // Maybe add a support reply
  if (Math.random() > 0.5) {
    emails.push({
      id: generateId(),
      from_name: 'Support Team',
      from_email: 'support@proresponse.ai',
      content: 'Thank you for reaching out. ' + randomElement(agentAnalyses),
      timestamp: new Date(new Date(thread.timestamp).getTime() + 3600000).toISOString(),
      is_support_reply: true
    });

    // Maybe add customer follow-up
    if (Math.random() > 0.5) {
      emails.push({
        id: generateId(),
        from_name: thread.customer_name,
        from_email: thread.customer_email,
        content: 'Thanks for the quick response! That solved my issue.',
        timestamp: new Date(new Date(thread.timestamp).getTime() + 7200000).toISOString(),
        is_support_reply: false
      });
    }
  }

  return {
    id: thread.id,
    subject: thread.subject,
    status: thread.status,
    tags: thread.tags,
    customer: {
      name: thread.customer_name,
      email: thread.customer_email
    },
    emails,
    agent_activity: {
      analysis: randomElement(agentAnalyses),
      draft_response: `Dear ${thread.customer_name},\n\nThank you for reaching out. ${randomElement(agentAnalyses)}\n\nBest regards,\nSupport Team`,
      actions
    }
  };
}

export function generateMockDraft(): Draft {
  return {
    content: `Dear Customer,\n\n${randomElement(agentAnalyses)}\n\nPlease let me know if you need any further assistance.\n\nBest regards,\nSupport Team`,
    last_updated: generateTimestamp(0),
    is_agent_generated: true
  };
}

export function generateMockAgentActivity(): AgentActivityDetail {
  const actions: AgentAction[] = [
    {
      id: generateId(),
      type: 'analyze',
      title: 'Email Analysis',
      description: 'Analyzed email content and extracted key information',
      timestamp: generateTimestamp(0),
      status: 'completed',
      result: { sentiment: 'neutral', category: 'technical-support' }
    },
    {
      id: generateId(),
      type: 'search',
      title: 'Knowledge Base Search',
      description: 'Searched for relevant documentation',
      timestamp: generateTimestamp(0),
      status: 'completed',
      result: { documents_found: 5, relevance_score: 0.85 }
    },
    {
      id: generateId(),
      type: 'generate',
      title: 'Response Generation',
      description: 'Generated draft response using AI',
      timestamp: generateTimestamp(0),
      status: 'completed'
    }
  ];

  return {
    analysis: randomElement(agentAnalyses),
    suggested_response: generateMockDraft().content,
    confidence_score: 0.75 + Math.random() * 0.2,
    actions,
    knowledge_used: [
      { source: 'FAQ: Account Access Issues', relevance: 0.9 },
      { source: 'Troubleshooting Guide: Login Problems', relevance: 0.85 },
      { source: 'Security Best Practices', relevance: 0.7 }
    ]
  };
}

export function generateMockThreadCounts(threads: Thread[]): ThreadCounts {
  return {
    all: threads.length,
    unread: threads.filter(t => t.is_unread).length,
    flagged: threads.filter(t => t.tags.includes('flagged')).length,
    urgent: threads.filter(t => t.tags.includes('urgent')).length,
    awaiting_customer: threads.filter(t => t.status === 'pending').length,
    closed: threads.filter(t => t.status === 'closed').length
  };
}

// Generate a set of mock threads
export const mockThreads: Thread[] = Array.from({ length: 20 }, (_, i) => generateMockThread(i));
</file>

<file path="src/repo/query-client.ts">
import { QueryClient } from '@tanstack/react-query';

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5, // 5 minutes
      gcTime: 1000 * 60 * 10, // 10 minutes (formerly cacheTime)
      retry: 3,
      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
    },
    mutations: {
      retry: 1,
    },
  },
});
</file>

<file path="src/stores/auth-store.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

interface User {
  id: string;
  email: string;
  name: string;
}

interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  login: (email: string) => Promise<void>;
  logout: () => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      user: null,
      isAuthenticated: false,
      
      login: async (email: string) => {
        // Mock login - in real app, this would call an API
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const mockUser: User = {
          id: '1',
          email,
          name: email.split('@')[0].charAt(0).toUpperCase() + email.split('@')[0].slice(1),
        };
        
        set({
          user: mockUser,
          isAuthenticated: true,
        });
      },
      
      logout: () => {
        set({
          user: null,
          isAuthenticated: false,
        });
      },
    }),
    {
      name: 'auth-storage',
    }
  )
);
</file>

<file path="src/stores/composer-store.ts">
import { create } from 'zustand';

interface ComposerState {
  // Draft content by thread ID
  drafts: Record<string, string>;
  
  // Current editor state
  currentThreadId: string | null;
  isDirty: boolean;
  
  // Actions
  setDraft: (threadId: string, content: string) => void;
  getDraft: (threadId: string) => string;
  clearDraft: (threadId: string) => void;
  setCurrentThread: (threadId: string | null) => void;
  setDirty: (dirty: boolean) => void;
}

export const useComposerStore = create<ComposerState>((set, get) => ({
  // Initial state
  drafts: {},
  currentThreadId: null,
  isDirty: false,
  
  // Actions
  setDraft: (threadId, content) => {
    set((state) => ({
      drafts: {
        ...state.drafts,
        [threadId]: content,
      },
      isDirty: true,
    }));
  },
  
  getDraft: (threadId) => {
    return get().drafts[threadId] || '';
  },
  
  clearDraft: (threadId) => {
    set((state) => {
      const newDrafts = { ...state.drafts };
      delete newDrafts[threadId];
      return {
        drafts: newDrafts,
        isDirty: false,
      };
    });
  },
  
  setCurrentThread: (threadId) => {
    set({ currentThreadId: threadId });
  },
  
  setDirty: (dirty) => {
    set({ isDirty: dirty });
  },
}));
</file>

<file path="src/stores/ui-store.ts">
import { create } from 'zustand';
import type { ThreadFilter } from '../types/api';

interface UIState {
  // Thread list state
  selectedThreadId: string | null;
  threadFilter: ThreadFilter;
  searchQuery: string;
  
  // Composer state
  isComposerOpen: boolean;
  composerMode: 'reply' | 'new';
  
  // Agent panel state
  isAgentPanelOpen: boolean;
  
  // Actions
  setSelectedThread: (id: string | null) => void;
  setThreadFilter: (filter: ThreadFilter) => void;
  setSearchQuery: (query: string) => void;
  setComposerOpen: (open: boolean, mode?: 'reply' | 'new') => void;
  setAgentPanelOpen: (open: boolean) => void;
}

export const useUIStore = create<UIState>((set) => ({
  // Initial state
  selectedThreadId: null,
  threadFilter: 'all',
  searchQuery: '',
  isComposerOpen: false,
  composerMode: 'reply',
  isAgentPanelOpen: true,
  
  // Actions
  setSelectedThread: (id) => set({ selectedThreadId: id }),
  
  setThreadFilter: (filter) => set({ threadFilter: filter }),
  
  setSearchQuery: (query) => set({ searchQuery: query }),
  
  setComposerOpen: (open, mode = 'reply') => set({ 
    isComposerOpen: open,
    composerMode: mode,
  }),
  
  setAgentPanelOpen: (open) => set({ isAgentPanelOpen: open }),
}));
</file>

<file path="src/stories/atoms/Avatar.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { Avatar } from '../../components/atoms/Avatar';

const meta: Meta<typeof Avatar> = {
  title: 'Atoms/Avatar',
  component: Avatar,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    size: {
      control: 'select',
      options: ['sm', 'md', 'lg'],
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const WithImage: Story = {
  args: {
    src: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Felix',
    alt: 'User avatar',
  },
};

export const WithFallback: Story = {
  args: {
    fallback: 'JD',
  },
};

export const Small: Story = {
  args: {
    fallback: 'AB',
    size: 'sm',
  },
};

export const Large: Story = {
  args: {
    fallback: 'XY',
    size: 'lg',
  },
};
</file>

<file path="src/stories/atoms/Badge.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { Badge } from '../../components/atoms/Badge';

const meta: Meta<typeof Badge> = {
  title: 'Atoms/Badge',
  component: Badge,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: 'select',
      options: ['default', 'secondary', 'destructive', 'outline'],
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    children: 'Badge',
  },
};

export const Secondary: Story = {
  args: {
    children: 'Secondary',
    variant: 'secondary',
  },
};

export const Destructive: Story = {
  args: {
    children: 'Urgent',
    variant: 'destructive',
  },
};

export const Outline: Story = {
  args: {
    children: 'Outline',
    variant: 'outline',
  },
};

export const StatusBadges: Story = {
  render: () => (
    <div className="flex gap-2">
      <Badge>New</Badge>
      <Badge variant="secondary">Unread</Badge>
      <Badge variant="destructive">Urgent</Badge>
      <Badge variant="outline">Flagged</Badge>
    </div>
  ),
};
</file>

<file path="src/stories/atoms/Button.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { Button } from '../../components/atoms/Button';

const meta: Meta<typeof Button> = {
  title: 'Atoms/Button',
  component: Button,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: 'select',
      options: ['primary', 'secondary', 'destructive', 'ghost', 'link'],
    },
    size: {
      control: 'select',
      options: ['sm', 'md', 'lg'],
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    children: 'Button',
    variant: 'primary',
  },
};

export const Secondary: Story = {
  args: {
    children: 'Button',
    variant: 'secondary',
  },
};

export const Destructive: Story = {
  args: {
    children: 'Delete',
    variant: 'destructive',
  },
};

export const Ghost: Story = {
  args: {
    children: 'Button',
    variant: 'ghost',
  },
};

export const Link: Story = {
  args: {
    children: 'Button',
    variant: 'link',
  },
};

export const Small: Story = {
  args: {
    children: 'Small',
    size: 'sm',
  },
};

export const Large: Story = {
  args: {
    children: 'Large',
    size: 'lg',
  },
};

export const Disabled: Story = {
  args: {
    children: 'Disabled',
    disabled: true,
  },
};
</file>

<file path="src/stories/atoms/Input.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { Input } from '../../components/atoms/Input';

const meta: Meta<typeof Input> = {
  title: 'Atoms/Input',
  component: Input,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    placeholder: 'Enter text...',
  },
};

export const Email: Story = {
  args: {
    type: 'email',
    placeholder: 'Email address',
  },
};

export const Password: Story = {
  args: {
    type: 'password',
    placeholder: 'Password',
  },
};

export const Disabled: Story = {
  args: {
    placeholder: 'Disabled input',
    disabled: true,
  },
};

export const WithValue: Story = {
  args: {
    value: 'Hello World',
    readOnly: true,
  },
};
</file>

<file path="src/stories/molecules/AgentAction.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { AgentAction } from '../../components/molecules/AgentAction';
import { Search, FileText, Send, AlertCircle } from 'lucide-react';

const meta: Meta<typeof AgentAction> = {
  title: 'Molecules/AgentAction',
  component: AgentAction,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    status: {
      control: 'select',
      options: ['pending', 'completed', 'failed'],
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const SearchKnowledgeBase: Story = {
  args: {
    icon: Search,
    title: 'Searched Knowledge Base',
    description: 'Found 3 relevant articles about checkout issues',
    timestamp: '2 min ago',
    status: 'completed',
  },
};

export const FetchBugReport: Story = {
  args: {
    icon: FileText,
    title: 'Fetched Bug Report #1248',
    description: 'Similar issue fixed in v2.4',
    timestamp: '1 min ago',
    status: 'completed',
  },
};

export const DraftReply: Story = {
  args: {
    icon: Send,
    title: 'Drafting Reply',
    status: 'pending',
  },
};

export const Failed: Story = {
  args: {
    icon: AlertCircle,
    title: 'Failed to Query Database',
    description: 'Connection timeout',
    timestamp: '30 sec ago',
    status: 'failed',
  },
};
</file>

<file path="src/stories/molecules/FilterPills.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { FilterPills } from '../../components/molecules/FilterPills';

const meta: Meta<typeof FilterPills> = {
  title: 'Molecules/FilterPills',
  component: FilterPills,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    options: [
      { id: 'all', label: 'All' },
      { id: 'unread', label: 'Unread' },
      { id: 'flagged', label: 'Flagged' },
      { id: 'urgent', label: 'Urgent' },
    ],
    value: 'all',
  },
};

export const WithCounts: Story = {
  args: {
    options: [
      { id: 'all', label: 'All', count: 124 },
      { id: 'unread', label: 'Unread', count: 8 },
      { id: 'flagged', label: 'Flagged', count: 3 },
      { id: 'urgent', label: 'Urgent', count: 2 },
      { id: 'awaiting', label: 'Awaiting Customer', count: 14 },
      { id: 'closed', label: 'Closed', count: 98 },
    ],
    value: 'unread',
  },
};
</file>

<file path="src/stories/molecules/SearchInput.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { SearchInput } from '../../components/molecules/SearchInput';

const meta: Meta<typeof SearchInput> = {
  title: 'Molecules/SearchInput',
  component: SearchInput,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    placeholder: 'Search threads...',
  },
};

export const WithValue: Story = {
  args: {
    value: 'Bug in checkout',
    readOnly: true,
  },
};
</file>

<file path="src/stories/molecules/ThreadPreview.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { ThreadPreview } from '../../components/molecules/ThreadPreview';

const meta: Meta<typeof ThreadPreview> = {
  title: 'Molecules/ThreadPreview',
  component: ThreadPreview,
  parameters: {
    layout: 'padded',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    title: 'Bug in Checkout Flow',
    snippet: 'Customer experiencing error on step 3 of the checkout process...',
    author: {
      name: 'Jane Doe',
      initials: 'JD',
    },
    timestamp: '2 hours ago',
  },
};

export const Active: Story = {
  args: {
    title: 'Feature Request: Dark Mode',
    snippet: 'Is there a way to enable dark mode on the dashboard?',
    author: {
      name: 'John Smith',
      initials: 'JS',
    },
    timestamp: '5 hours ago',
    isActive: true,
  },
};

export const Unread: Story = {
  args: {
    title: 'Thank you for the quick response!',
    snippet: 'Just wanted to say your support has been amazing...',
    author: {
      name: 'Sarah Johnson',
      initials: 'SJ',
    },
    timestamp: '30 min ago',
    isUnread: true,
  },
};

export const WithBadges: Story = {
  args: {
    title: 'Payment Failed - Urgent',
    snippet: 'My payment keeps failing and I need to complete this order today...',
    author: {
      name: 'Mike Wilson',
      initials: 'MW',
    },
    timestamp: '10 min ago',
    isUnread: true,
    badges: [
      { label: 'Urgent', variant: 'destructive' },
      { label: 'Payment', variant: 'outline' },
    ],
  },
};
</file>

<file path="src/stories/organisms/AgentPanel.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { AgentPanel } from '../../components/organisms/AgentPanel';
import { Search, FileText, Send, AlertCircle } from 'lucide-react';

const meta: Meta<typeof AgentPanel> = {
  title: 'Organisms/AgentPanel',
  component: AgentPanel,
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
  decorators: [
    (Story) => (
      <div style={{ height: '600px', width: '300px' }}>
        <Story />
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof meta>;

const sampleActions = [
  {
    icon: Search,
    title: 'Searched Knowledge Base',
    description: 'Found 3 relevant articles about checkout issues',
    timestamp: '2 min ago',
    status: 'completed' as const,
  },
  {
    icon: FileText,
    title: 'Fetched Bug Report #1248',
    description: 'Similar issue fixed in v2.4',
    timestamp: '1 min ago',
    status: 'completed' as const,
  },
  {
    icon: Send,
    title: 'Drafted Reply',
    description: 'Created response with workaround steps',
    timestamp: '30 sec ago',
    status: 'completed' as const,
  },
];

export const Default: Story = {
  args: {
    actions: sampleActions,
    analysis: 'The customer cannot proceed past the payment step. This appears to be related to a known issue that was fixed in v2.4. The customer might be using an older cached version of the checkout page.',
    draftResponse: 'Hi Jane, thanks for reaching out! I understand you\'re having trouble with the checkout process. As a quick fix, try clearing your browser cache and cookies. This should resolve the issue immediately.',
  },
};

export const ActionsOnly: Story = {
  args: {
    actions: sampleActions,
  },
};

export const WithFailedAction: Story = {
  args: {
    actions: [
      ...sampleActions.slice(0, 2),
      {
        icon: AlertCircle,
        title: 'Failed to Query Database',
        description: 'Connection timeout',
        timestamp: '30 sec ago',
        status: 'failed' as const,
      },
    ],
    analysis: 'Unable to complete full analysis due to database connection issues.',
  },
};
</file>

<file path="src/stories/organisms/Composer.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { Composer } from '../../components/organisms/Composer';

const meta: Meta<typeof Composer> = {
  title: 'Organisms/Composer',
  component: Composer,
  parameters: {
    layout: 'padded',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    placeholder: 'Type your reply...',
  },
};

export const WithValue: Story = {
  args: {
    value: 'Thank you for reaching out! I\'ll be happy to help you with this issue.',
  },
};

export const Disabled: Story = {
  args: {
    disabled: true,
    placeholder: 'Reply disabled',
  },
};
</file>

<file path="src/stories/organisms/Header.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { Header } from '../../components/organisms/Header';

const meta: Meta<typeof Header> = {
  title: 'Organisms/Header',
  component: Header,
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {},
};

export const WithUser: Story = {
  args: {
    user: {
      name: 'John Doe',
      initials: 'JD',
    },
  },
};

export const WithNotifications: Story = {
  args: {
    user: {
      name: 'Jane Smith',
      initials: 'JS',
    },
    notificationCount: 3,
  },
};
</file>

<file path="src/stories/organisms/ThreadDetail.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { ThreadDetail } from '../../components/organisms/ThreadDetail';

const meta: Meta<typeof ThreadDetail> = {
  title: 'Organisms/ThreadDetail',
  component: ThreadDetail,
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
  decorators: [
    (Story) => (
      <div style={{ height: '600px', display: 'flex' }}>
        <Story />
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof meta>;

const sampleMessages = [
  {
    id: '1',
    author: {
      name: 'Jane Doe',
      email: 'jane.doe@example.com',
      initials: 'JD',
    },
    content: 'Hi team,\n\nI\'m encountering an issue during the checkout flow where the page freezes on step 3. This happens every time I try to complete a purchase.\n\nCould you please look into this? It\'s preventing me from placing my order.',
    timestamp: 'Oct 2, 2024 • 11:14 AM',
  },
  {
    id: '2',
    author: {
      name: 'Agent James',
      email: 'support@proresponse.ai',
      initials: 'AJ',
    },
    content: 'Thanks for reaching out, Jane!\n\nI\'m sorry to hear you\'re experiencing issues with the checkout process. I\'ve looked into this and found that we had a similar issue that was fixed in our latest update.\n\nAs a temporary workaround, could you try:\n1. Clearing your browser cache\n2. Using a different browser\n3. Disabling any ad blockers\n\nOur engineering team is investigating this further. I\'ll keep you updated on the progress.',
    timestamp: 'Oct 2, 2024 • 11:20 AM',
    isSupport: true,
  },
  {
    id: '3',
    author: {
      name: 'Jane Doe',
      email: 'jane.doe@example.com',
      initials: 'JD',
    },
    content: 'Thanks for the quick response! I tried clearing my cache and it worked. I was able to complete my order successfully.',
    timestamp: 'Oct 2, 2024 • 11:45 AM',
  },
];

export const Default: Story = {
  args: {
    subject: 'Bug in Checkout Flow',
    messages: sampleMessages,
    status: 'open',
    tags: ['checkout', 'bug'],
  },
};

export const ClosedThread: Story = {
  args: {
    subject: 'Feature Request: Dark Mode',
    messages: [
      {
        id: '1',
        author: {
          name: 'John Smith',
          email: 'john@example.com',
          initials: 'JS',
        },
        content: 'Is there a way to enable dark mode on the dashboard?',
        timestamp: 'Oct 1, 2024 • 2:30 PM',
      },
      {
        id: '2',
        author: {
          name: 'Support Team',
          email: 'support@proresponse.ai',
          initials: 'ST',
        },
        content: 'Thanks for the suggestion! Dark mode is on our roadmap and should be available in the next major release.',
        timestamp: 'Oct 1, 2024 • 3:15 PM',
        isSupport: true,
      },
    ],
    status: 'closed',
    tags: ['feature-request'],
  },
};
</file>

<file path="src/stories/organisms/ThreadList.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { ThreadList } from '../../components/organisms/ThreadList';

const meta: Meta<typeof ThreadList> = {
  title: 'Organisms/ThreadList',
  component: ThreadList,
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
  decorators: [
    (Story) => (
      <div style={{ height: '600px', display: 'flex' }}>
        <Story />
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof meta>;

const sampleThreads = [
  {
    id: '1',
    title: 'Bug in Checkout Flow',
    snippet: 'Customer experiencing error on step 3 of the checkout process...',
    author: { name: 'Jane Doe', initials: 'JD' },
    timestamp: '2 hours ago',
    isUnread: true,
    badges: [
      { label: 'Urgent', variant: 'destructive' as const },
      { label: 'Bug', variant: 'outline' as const },
    ],
  },
  {
    id: '2',
    title: 'Feature Request: Dark Mode',
    snippet: 'Is there a way to enable dark mode on the dashboard?',
    author: { name: 'John Smith', initials: 'JS' },
    timestamp: '5 hours ago',
  },
  {
    id: '3',
    title: 'Thank you for the quick response!',
    snippet: 'Just wanted to say your support has been amazing...',
    author: { name: 'Sarah Johnson', initials: 'SJ' },
    timestamp: '1 day ago',
  },
];

const filters = [
  { id: 'all', label: 'All', count: 124 },
  { id: 'unread', label: 'Unread', count: 8 },
  { id: 'flagged', label: 'Flagged', count: 3 },
  { id: 'urgent', label: 'Urgent', count: 2 },
];

export const Default: Story = {
  args: {
    threads: sampleThreads,
    filters: filters,
    activeFilter: 'all',
    activeThreadId: '1',
  },
};

export const Empty: Story = {
  args: {
    threads: [],
    filters: filters,
    activeFilter: 'all',
  },
};

export const NoFilters: Story = {
  args: {
    threads: sampleThreads,
  },
};
</file>

<file path="src/stories/templates/AppLayout.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { AppLayout } from '../../components/templates/AppLayout';
import { Header } from '../../components/organisms/Header';
import { ThreadList } from '../../components/organisms/ThreadList';
import { ThreadDetail } from '../../components/organisms/ThreadDetail';
import { AgentPanel } from '../../components/organisms/AgentPanel';
import { Composer } from '../../components/organisms/Composer';
import { Search, FileText, Send } from 'lucide-react';

const meta: Meta<typeof AppLayout> = {
  title: 'Templates/AppLayout',
  component: AppLayout,
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

const sampleThreads = [
  {
    id: '1',
    title: 'Bug in Checkout Flow',
    snippet: 'Customer experiencing error on step 3 of the checkout process...',
    author: { name: 'Jane Doe', initials: 'JD' },
    timestamp: '2 hours ago',
    isUnread: true,
    badges: [
      { label: 'Urgent', variant: 'destructive' as const },
      { label: 'Bug', variant: 'outline' as const },
    ],
  },
  {
    id: '2',
    title: 'Feature Request: Dark Mode',
    snippet: 'Is there a way to enable dark mode on the dashboard?',
    author: { name: 'John Smith', initials: 'JS' },
    timestamp: '5 hours ago',
  },
];

const sampleMessages = [
  {
    id: '1',
    author: {
      name: 'Jane Doe',
      email: 'jane.doe@example.com',
      initials: 'JD',
    },
    content: 'Hi team,\n\nI\'m encountering an issue during the checkout flow where the page freezes on step 3.',
    timestamp: 'Oct 2, 2024 • 11:14 AM',
  },
  {
    id: '2',
    author: {
      name: 'Agent James',
      email: 'support@proresponse.ai',
      initials: 'AJ',
    },
    content: 'Thanks for reaching out! I\'ll help you resolve this issue.',
    timestamp: 'Oct 2, 2024 • 11:20 AM',
    isSupport: true,
  },
];

const agentActions = [
  {
    icon: Search,
    title: 'Searched Knowledge Base',
    description: 'Found 3 relevant articles',
    timestamp: '2 min ago',
    status: 'completed' as const,
  },
  {
    icon: FileText,
    title: 'Fetched Bug Report #1248',
    timestamp: '1 min ago',
    status: 'completed' as const,
  },
  {
    icon: Send,
    title: 'Drafted Reply',
    timestamp: '30 sec ago',
    status: 'completed' as const,
  },
];

export const Default: Story = {
  render: () => (
    <AppLayout
      header={
        <Header
          user={{ name: 'John Doe', initials: 'JD' }}
          notificationCount={3}
        />
      }
      sidebar={
        <ThreadList
          threads={sampleThreads}
          filters={[
            { id: 'all', label: 'All', count: 124 },
            { id: 'unread', label: 'Unread', count: 8 },
            { id: 'urgent', label: 'Urgent', count: 2 },
          ]}
          activeFilter="all"
          activeThreadId="1"
        />
      }
      main={
        <div className="h-full flex flex-col">
          <ThreadDetail
            subject="Bug in Checkout Flow"
            messages={sampleMessages}
            status="open"
            tags={['checkout', 'bug']}
          />
          <Composer placeholder="Type your reply..." />
        </div>
      }
      panel={
        <AgentPanel
          actions={agentActions}
          analysis="Customer cannot proceed past payment step. Appears related to issue fixed in v2.4."
          draftResponse="Try clearing your browser cache and cookies. This should resolve the issue immediately."
        />
      }
    />
  ),
};

export const WithoutAgentPanel: Story = {
  render: () => (
    <AppLayout
      header={
        <Header
          user={{ name: 'John Doe', initials: 'JD' }}
        />
      }
      sidebar={
        <ThreadList
          threads={sampleThreads}
          activeThreadId="1"
        />
      }
      main={
        <div className="h-full flex flex-col">
          <ThreadDetail
            subject="Bug in Checkout Flow"
            messages={sampleMessages}
            status="open"
            tags={['checkout', 'bug']}
          />
          <Composer placeholder="Type your reply..." />
        </div>
      }
    />
  ),
};
</file>

<file path="src/stories/templates/AuthLayout.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';
import { AuthLayout } from '../../components/templates/AuthLayout';
import { Button } from '../../components/atoms/Button';
import { Input } from '../../components/atoms/Input';
import { Label } from '../../components/atoms/Label';

const meta: Meta<typeof AuthLayout> = {
  title: 'Templates/AuthLayout',
  component: AuthLayout,
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Login: Story = {
  render: () => (
    <AuthLayout>
      <div className="bg-card rounded-lg border border-border p-6 shadow-sm">
        <h2 className="text-xl font-semibold mb-6">Sign in to your account</h2>
        <form className="space-y-4">
          <div>
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="email@example.com"
              className="mt-1"
            />
          </div>
          <div>
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              type="password"
              placeholder="Enter your password"
              className="mt-1"
            />
          </div>
          <Button className="w-full">Sign In</Button>
        </form>
        <p className="text-sm text-secondary-foreground text-center mt-4">
          Don't have an account?{' '}
          <Button variant="link" className="p-0 h-auto">
            Sign up
          </Button>
        </p>
      </div>
    </AuthLayout>
  ),
};

export const Signup: Story = {
  render: () => (
    <AuthLayout>
      <div className="bg-card rounded-lg border border-border p-6 shadow-sm">
        <h2 className="text-xl font-semibold mb-6">Create your account</h2>
        <form className="space-y-4">
          <div>
            <Label htmlFor="name">Full Name</Label>
            <Input
              id="name"
              type="text"
              placeholder="John Doe"
              className="mt-1"
            />
          </div>
          <div>
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="email@example.com"
              className="mt-1"
            />
          </div>
          <div>
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              type="password"
              placeholder="Create a password"
              className="mt-1"
            />
          </div>
          <Button className="w-full">Create Account</Button>
        </form>
        <p className="text-sm text-secondary-foreground text-center mt-4">
          Already have an account?{' '}
          <Button variant="link" className="p-0 h-auto">
            Sign in
          </Button>
        </p>
      </div>
    </AuthLayout>
  ),
};
</file>

<file path="src/stories/DesignSystem.stories.tsx">
import type { Meta, StoryObj } from '@storybook/react-vite';

const meta: Meta = {
  title: 'Design System/Tokens',
  parameters: {
    layout: 'padded',
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Colors: Story = {
  render: () => (
    <div className="space-y-8">
      <h2 className="text-2xl font-bold">Color Palette</h2>
      
      <div>
        <h3 className="text-lg font-semibold mb-4">Primary Colors</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <ColorSwatch name="background" className="bg-background" />
          <ColorSwatch name="foreground" className="bg-foreground" />
          <ColorSwatch name="card" className="bg-card border" />
          <ColorSwatch name="card-foreground" className="bg-card-foreground" />
        </div>
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-4">Interactive Colors</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <ColorSwatch name="primary" className="bg-primary" />
          <ColorSwatch name="primary-foreground" className="bg-primary-foreground border" />
          <ColorSwatch name="secondary" className="bg-secondary" />
          <ColorSwatch name="secondary-foreground" className="bg-secondary-foreground" />
        </div>
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-4">Semantic Colors</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <ColorSwatch name="destructive" className="bg-destructive" />
          <ColorSwatch name="destructive-foreground" className="bg-destructive-foreground border" />
          <ColorSwatch name="accent" className="bg-accent" />
          <ColorSwatch name="accent-foreground" className="bg-accent-foreground" />
        </div>
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-4">UI Colors</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <ColorSwatch name="border" className="bg-border" />
          <ColorSwatch name="input" className="bg-input border" />
          <ColorSwatch name="ring" className="bg-ring" />
        </div>
      </div>
    </div>
  ),
};

export const Typography: Story = {
  render: () => (
    <div className="space-y-8">
      <h2 className="text-2xl font-bold">Typography Scale</h2>
      
      <div className="space-y-6">
        <div>
          <p className="text-xs text-secondary-foreground mb-1">text-2xl (1.5rem / 2rem)</p>
          <p className="text-2xl">The quick brown fox jumps over the lazy dog</p>
        </div>
        <div>
          <p className="text-xs text-secondary-foreground mb-1">text-xl (1.25rem / 1.75rem)</p>
          <p className="text-xl">The quick brown fox jumps over the lazy dog</p>
        </div>
        <div>
          <p className="text-xs text-secondary-foreground mb-1">text-lg (1.125rem / 1.75rem)</p>
          <p className="text-lg">The quick brown fox jumps over the lazy dog</p>
        </div>
        <div>
          <p className="text-xs text-secondary-foreground mb-1">text-base (1rem / 1.5rem)</p>
          <p className="text-base">The quick brown fox jumps over the lazy dog</p>
        </div>
        <div>
          <p className="text-xs text-secondary-foreground mb-1">text-sm (0.875rem / 1.25rem)</p>
          <p className="text-sm">The quick brown fox jumps over the lazy dog</p>
        </div>
        <div>
          <p className="text-xs text-secondary-foreground mb-1">text-xs (0.75rem / 1rem)</p>
          <p className="text-xs">The quick brown fox jumps over the lazy dog</p>
        </div>
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-4">Font Weights</h3>
        <div className="space-y-2">
          <p className="font-normal">font-normal (400) - The quick brown fox jumps over the lazy dog</p>
          <p className="font-medium">font-medium (500) - The quick brown fox jumps over the lazy dog</p>
          <p className="font-semibold">font-semibold (600) - The quick brown fox jumps over the lazy dog</p>
          <p className="font-bold">font-bold (700) - The quick brown fox jumps over the lazy dog</p>
        </div>
      </div>
    </div>
  ),
};

export const Spacing: Story = {
  render: () => (
    <div className="space-y-8">
      <h2 className="text-2xl font-bold">Spacing Scale</h2>
      
      <div className="space-y-4">
        {[
          { name: '0', value: '0', width: 'w-0' },
          { name: '1', value: '0.25rem', width: 'w-1' },
          { name: '2', value: '0.5rem', width: 'w-2' },
          { name: '3', value: '0.75rem', width: 'w-3' },
          { name: '4', value: '1rem', width: 'w-4' },
          { name: '5', value: '1.25rem', width: 'w-5' },
          { name: '6', value: '1.5rem', width: 'w-6' },
          { name: '8', value: '2rem', width: 'w-8' },
          { name: '10', value: '2.5rem', width: 'w-10' },
          { name: '12', value: '3rem', width: 'w-12' },
          { name: '16', value: '4rem', width: 'w-16' },
          { name: '20', value: '5rem', width: 'w-20' },
          { name: '24', value: '6rem', width: 'w-24' },
        ].map((space) => (
          <div key={space.name} className="flex items-center gap-4">
            <span className="text-sm font-medium w-8">{space.name}</span>
            <span className="text-xs text-secondary-foreground w-20">{space.value}</span>
            <div className={`h-8 bg-primary ${space.width}`} />
          </div>
        ))}
      </div>
    </div>
  ),
};

export const BorderRadius: Story = {
  render: () => (
    <div className="space-y-8">
      <h2 className="text-2xl font-bold">Border Radius</h2>
      
      <div className="grid grid-cols-2 md:grid-cols-5 gap-6">
        <div className="text-center">
          <div className="w-24 h-24 bg-primary rounded-sm mx-auto mb-2" />
          <p className="text-sm font-medium">rounded-sm</p>
          <p className="text-xs text-secondary-foreground">0.125rem</p>
        </div>
        <div className="text-center">
          <div className="w-24 h-24 bg-primary rounded-md mx-auto mb-2" />
          <p className="text-sm font-medium">rounded-md</p>
          <p className="text-xs text-secondary-foreground">0.375rem</p>
        </div>
        <div className="text-center">
          <div className="w-24 h-24 bg-primary rounded-lg mx-auto mb-2" />
          <p className="text-sm font-medium">rounded-lg</p>
          <p className="text-xs text-secondary-foreground">0.5rem</p>
        </div>
        <div className="text-center">
          <div className="w-24 h-24 bg-primary rounded-xl mx-auto mb-2" />
          <p className="text-sm font-medium">rounded-xl</p>
          <p className="text-xs text-secondary-foreground">0.75rem</p>
        </div>
        <div className="text-center">
          <div className="w-24 h-24 bg-primary rounded-full mx-auto mb-2" />
          <p className="text-sm font-medium">rounded-full</p>
          <p className="text-xs text-secondary-foreground">9999px</p>
        </div>
      </div>
    </div>
  ),
};

export const Shadows: Story = {
  render: () => (
    <div className="space-y-8">
      <h2 className="text-2xl font-bold">Shadow Scale</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div className="text-center">
          <div className="w-32 h-32 bg-card rounded-lg shadow-sm mx-auto mb-4" />
          <p className="text-sm font-medium">shadow-sm</p>
        </div>
        <div className="text-center">
          <div className="w-32 h-32 bg-card rounded-lg shadow-md mx-auto mb-4" />
          <p className="text-sm font-medium">shadow-md</p>
        </div>
        <div className="text-center">
          <div className="w-32 h-32 bg-card rounded-lg shadow-lg mx-auto mb-4" />
          <p className="text-sm font-medium">shadow-lg</p>
        </div>
      </div>
    </div>
  ),
};

// Helper component for color swatches
function ColorSwatch({ name, className }: { name: string; className: string }) {
  return (
    <div className="space-y-2">
      <div className={`h-20 rounded-lg ${className}`} />
      <p className="text-sm font-medium">{name}</p>
      <p className="text-xs text-secondary-foreground">var(--color-{name})</p>
    </div>
  );
}
</file>

<file path="src/types/api.ts">
export interface Thread {
  id: string;
  subject: string;
  snippet: string;
  customer_name: string;
  customer_email: string;
  timestamp: string;
  is_unread: boolean;
  status: string;
  tags: string[];
}

export interface Customer {
  name: string;
  email: string;
}

export interface Email {
  id: string;
  from_name: string;
  from_email: string;
  content: string;
  timestamp: string;
  is_support_reply: boolean;
}

export interface AgentAction {
  id: string;
  type: string;
  title: string;
  description: string;
  timestamp: string;
  status: string;
  result?: unknown;
}

export interface AgentActivity {
  analysis: string;
  draft_response: string;
  actions: AgentAction[];
}

export interface ThreadDetail {
  id: string;
  subject: string;
  status: string;
  tags: string[];
  customer: Customer;
  emails: Email[];
  agent_activity: AgentActivity;
}

export interface Draft {
  content: string;
  last_updated: string;
  is_agent_generated: boolean;
}

export interface AgentActivityDetail {
  analysis: string;
  suggested_response: string;
  confidence_score: number;
  actions: AgentAction[];
  knowledge_used: Array<{
    source: string;
    relevance: number;
  }>;
}

export interface ThreadCounts {
  all: number;
  unread: number;
  flagged: number;
  urgent: number;
  awaiting_customer: number;
  closed: number;
}

export type ThreadFilter = 'all' | 'unread' | 'flagged' | 'urgent' | 'awaiting_customer' | 'closed';
</file>

<file path="src/App.tsx">
/*
// TODO: 
// Remove loginpage; using stack handler instead
*/
import { BrowserRouter as Router, Routes, Route, useLocation } from 'react-router-dom';
import { QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { queryClient } from './repo/query-client';
// import { LoginPage } from './pages/LoginPage';
import { InboxPage } from './pages/InboxPage';
import { ProtectedRoute } from './components/ProtectedRoute';
import { stackClientApp } from './lib/stack';
import { StackHandler, StackProvider, StackTheme } from '@stackframe/react';


function HandlerRoutes() {
  const location = useLocation();
  return (
    <StackHandler app={stackClientApp} location={location.pathname} fullPage />
  );
}


function App() {
  return (
    <QueryClientProvider client={queryClient}>

      <Router>
        <StackProvider app={stackClientApp}>
          <StackTheme>
            <Routes>
              <Route path="/handler/*" element={<HandlerRoutes />} />
              {/* <Route path="/login" element={<LoginPage />} /> */}
              <Route element={<ProtectedRoute />}>
                <Route path="/" element={<InboxPage />} />
                <Route path="/thread/:threadId" element={<InboxPage />} />
              </Route>
            </Routes>
          </StackTheme>
        </StackProvider>
      </Router>
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
}

export default App
</file>

<file path="src/index.css">
@import "tailwindcss";

@theme {
  /* Colors - semantic tokens for theming support */
  --color-background: #fafafa;
  --color-foreground: #1e1e1e;
  --color-card: #ffffff;
  --color-card-foreground: #1e1e1e;
  --color-primary: #4338ca;
  --color-primary-foreground: #ffffff;
  --color-secondary: #e5e7eb;
  --color-secondary-foreground: #4b5563;
  --color-destructive: #dc2626;
  --color-destructive-foreground: #ffffff;
  --color-accent: #eef2ff;
  --color-accent-foreground: #4338ca;
  --color-border: #e5e7eb;
  --color-input: #ffffff;
  --color-ring: #4338ca;
  
  /* Typography */
  --font-family-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  
  /* Font sizes with corresponding line heights */
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  
  --line-height-xs: 1rem;
  --line-height-sm: 1.25rem;
  --line-height-base: 1.5rem;
  --line-height-lg: 1.75rem;
  --line-height-xl: 1.75rem;
  --line-height-2xl: 2rem;
  
  /* Font weights */
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
  
  /* Spacing scale (4-point system) */
  --spacing-0: 0;
  --spacing-1: 0.25rem;
  --spacing-2: 0.5rem;
  --spacing-3: 0.75rem;
  --spacing-4: 1rem;
  --spacing-5: 1.25rem;
  --spacing-6: 1.5rem;
  --spacing-8: 2rem;
  --spacing-10: 2.5rem;
  --spacing-12: 3rem;
  --spacing-16: 4rem;
  --spacing-20: 5rem;
  --spacing-24: 6rem;
  
  /* Border radius */
  --radius-sm: 0.125rem;
  --radius-md: 0.375rem;
  --radius-lg: 0.5rem;
  --radius-xl: 0.75rem;
  --radius-full: 9999px;
  
  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  
  /* Transitions */
  --transition-fast: 150ms;
  --transition-base: 200ms;
  --transition-slow: 300ms;
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="variations/design1.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ProResponse AI – Thread View (Dark)</title>
  <style>
    /* Reset */
    *,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
    :root{
      --bg:#121212;
      --bg-panel:#1f1f1f;
      --bg-hover:#272727;
      --text:#e5e5e5;
      --accent:#3b82f6;
      --border:#2e2e2e;
    }
    body{font-family:system-ui,Arial,Helvetica,sans-serif;background:var(--bg);color:var(--text);height:100vh;display:flex}

    /* Layout */
    .sidebar,.tool-history{background:var(--bg-panel);border-right:1px solid var(--border)}
    .sidebar{width:240px;overflow-y:auto}
    .tool-history{width:300px;border-left:1px solid var(--border);overflow-y:auto}
    .main{flex:1;display:flex;flex-direction:column;overflow:hidden}

    /* Sidebar */
    .thread-item{padding:1rem 1.25rem;border-bottom:1px solid var(--border);cursor:pointer;transition:background .15s}
    .thread-item:hover{background:var(--bg-hover)}
    .thread-item.active{background:var(--accent)20%}
    .thread-title{font-weight:600;margin-bottom:.25rem;color:var(--text)}
    .thread-snippet{font-size:.875rem;color:#9ca3af}

    /* Messages */
    .messages{flex:1;padding:2rem 3rem;overflow-y:auto}
    .message{max-width:600px;margin-bottom:1.5rem}
    .msg-header{display:flex;align-items:center;margin-bottom:.5rem}
    .avatar{width:32px;height:32px;background:var(--accent);border-radius:50%;margin-right:.75rem;display:flex;align-items:center;justify-content:center;color:#fff;font-size:.875rem;font-weight:600}
    .author{font-weight:600}
    .timestamp{font-size:.75rem;color:#71717a;margin-left:.5rem}
    .bubble{background:var(--bg-panel);border:1px solid var(--border);border-radius:.75rem;padding:1rem 1.25rem;line-height:1.5}

    /* Tool history */
    .history-section{padding:1rem 1.25rem;border-bottom:1px solid var(--border)}
    .history-title{font-weight:600;margin-bottom:.5rem}
    .tool-call{background:var(--bg-hover);border:1px solid var(--border);border-radius:.5rem;padding:.75rem 1rem;font-size:.875rem;margin-bottom:.75rem;word-break:break-all}

    /* Scrollbar */
    ::-webkit-scrollbar{width:10px}
    ::-webkit-scrollbar-track{background:var(--bg-panel)}
    ::-webkit-scrollbar-thumb{background:#444;border-radius:10px}
    ::-webkit-scrollbar-thumb:hover{background:#555}
  </style>
</head>
<body>
  <aside class="sidebar">
    <div class="thread-item active">
      <div class="thread-title">Bug in Checkout Flow</div>
      <div class="thread-snippet">Customer experiencing error on step 3...</div>
    </div>
    <div class="thread-item">
      <div class="thread-title">Feature Request: Dark Mode</div>
      <div class="thread-snippet">Is there a way to enable dark mode on...</div>
    </div>
    <div class="thread-item">
      <div class="thread-title">Thank you for the quick response!</div>
      <div class="thread-snippet">Just wanted to say your support has...</div>
    </div>
  </aside>

  <main class="main">
    <section class="messages">
      <article class="message">
        <div class="msg-header"><div class="avatar">JD</div><span class="author">Jane Doe</span><time class="timestamp">Oct 2, 2025 • 11:14 AM</time></div>
        <div class="bubble">Hi team, I'm encountering an issue during the checkout flow where the page freezes on step 3. Could you please look into this?</div>
      </article>
      <article class="message">
        <div class="msg-header"><div class="avatar">AJ</div><span class="author">Agent James</span><time class="timestamp">Oct 2, 2025 • 11:20 AM</time></div>
        <div class="bubble">Thanks for reaching out, Jane! We're sorry about the trouble. Let me gather some information and I'll get back to you shortly.</div>
      </article>
      <article class="message">
        <div class="msg-header"><div class="avatar">JD</div><span class="author">Jane Doe</span><time class="timestamp">Oct 2, 2025 • 11:45 AM</time></div>
        <div class="bubble">Any updates on this? I'm on a tight deadline.</div>
      </article>
    </section>
  </main>

  <aside class="tool-history">
    <div class="history-section"><div class="history-title">Tool Calls</div><div class="tool-call">searchKnowledgeBase("checkout step 3 freeze")</div><div class="tool-call">fetchBugReport(#1248)</div><div class="tool-call">draftReply("Apology + workaround")</div></div>
    <div class="history-section"><div class="history-title">Analysis</div><p style="font-size:.9rem;line-height:1.4;color:#d1d5db">The customer cannot proceed past the payment step. Similar bug fixed in v2.4. Suggest clearing cache or switching browsers as temporary workaround while engineering investigates.</p></div>
  </aside>
</body>
</html>
</file>

<file path="variations/design2.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ProResponse AI – Thread View (Gradient)</title>
  <style>
    *,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
    body{font-family:"Helvetica Neue",Arial,sans-serif;background:#f0f4ff;color:#222;height:100vh;display:flex}

    /* Gradient bar */
    .grad-bar{position:fixed;top:0;left:0;width:100%;height:6px;background:linear-gradient(90deg,#4f46e5 0%,#6366f1 50%,#818cf8 100%)}

    /* Layout */
    .sidebar{width:260px;background:#ffffff;border-right:2px solid #e0e7ff;overflow-y:auto;box-shadow:2px 0 4px rgba(0,0,0,.05)}
    .main{flex:1;display:flex;flex-direction:column;overflow:hidden}
    .tool-history{width:310px;background:#fdfdff;border-left:2px solid #e0e7ff;overflow-y:auto}

    /* Sidebar items */
    .thread-item{padding:1.25rem;border-bottom:1px solid #eef2ff;cursor:pointer;transition:background .15s}
    .thread-item:hover{background:#f8faff}
    .thread-item.active{background:#e0e7ff}
    .thread-title{font-weight:700;margin-bottom:.3rem;color:#4f46e5}
    .thread-snippet{font-size:.85rem;color:#6b7280}

    /* Messages */
    .messages{flex:1;padding:2rem 4rem;overflow-y:auto}
    .message{max-width:640px;margin-bottom:2rem}
    .msg-header{display:flex;align-items:center;margin-bottom:.6rem}
    .avatar{width:36px;height:36px;border-radius:50%;background:#4f46e5;color:#fff;display:flex;align-items:center;justify-content:center;font-size:.9rem;font-weight:700;margin-right:.9rem}
    .author{font-weight:700;color:#3730a3}
    .timestamp{font-size:.75rem;color:#6b7280;margin-left:.6rem}
    .bubble{background:#ffffff;border:1px solid #e0e7ff;border-radius:.9rem;padding:1.2rem 1.4rem;line-height:1.6;box-shadow:0 2px 4px rgba(0,0,0,.04)}

    /* Tool history */
    .history-section{padding:1.25rem;border-bottom:1px solid #eef2ff}
    .history-title{font-weight:700;margin-bottom:.6rem;color:#4f46e5}
    .tool-call{background:#f8faff;border:1px solid #e0e7ff;border-radius:.6rem;padding:.8rem 1.1rem;font-size:.85rem;margin-bottom:.8rem;word-break:break-all}

    /* Scrollbar */
    ::-webkit-scrollbar{width:10px}
    ::-webkit-scrollbar-track{background:#f0f4ff}
    ::-webkit-scrollbar-thumb{background:#c7d2fe;border-radius:10px}
    ::-webkit-scrollbar-thumb:hover{background:#a5b4fc}
  </style>
</head>
<body>
  <div class="grad-bar"></div>
  <aside class="sidebar">
    <div class="thread-item active"><div class="thread-title">Bug in Checkout Flow</div><div class="thread-snippet">Customer experiencing error on step 3...</div></div>
    <div class="thread-item"><div class="thread-title">Feature Request: Dark Mode</div><div class="thread-snippet">Is there a way to enable dark mode on...</div></div>
    <div class="thread-item"><div class="thread-title">Thank you for the quick response!</div><div class="thread-snippet">Just wanted to say your support has...</div></div>
  </aside>

  <main class="main">
    <section class="messages">
      <article class="message"><div class="msg-header"><div class="avatar">JD</div><span class="author">Jane Doe</span><time class="timestamp">Oct 2, 2025 • 11:14 AM</time></div><div class="bubble">Hi team, I'm encountering an issue during the checkout flow where the page freezes on step 3. Could you please look into this?</div></article>
      <article class="message"><div class="msg-header"><div class="avatar">AJ</div><span class="author">Agent James</span><time class="timestamp">Oct 2, 2025 • 11:20 AM</time></div><div class="bubble">Thanks for reaching out, Jane! We're sorry about the trouble. Let me gather some information and I'll get back to you shortly.</div></article>
      <article class="message"><div class="msg-header"><div class="avatar">JD</div><span class="author">Jane Doe</span><time class="timestamp">Oct 2, 2025 • 11:45 AM</time></div><div class="bubble">Any updates on this? I'm on a tight deadline.</div></article>
    </section>
  </main>

  <aside class="tool-history">
    <div class="history-section"><div class="history-title">Tool Calls</div><div class="tool-call">searchKnowledgeBase("checkout step 3 freeze")</div><div class="tool-call">fetchBugReport(#1248)</div><div class="tool-call">draftReply("Apology + workaround")</div></div>
    <div class="history-section"><div class="history-title">Analysis</div><p style="font-size:.9rem;line-height:1.5;color:#374151">The customer cannot proceed past the payment step. Similar bug fixed in v2.4. Suggest clearing cache or switching browsers as temporary workaround while engineering investigates.</p></div>
  </aside>
</body>
</html>
</file>

<file path="variations/design3.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ProResponse AI – Thread View (Minimal Cards)</title>
  <style>
    *,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
    body{font-family:Georgia,serif;background:#ffffff;color:#333;height:100vh;display:flex}

    /* Layout */
    .sidebar{width:220px;background:#f8f8f8;border-right:1px solid #eee;overflow-y:auto}
    .main{flex:1;display:flex;flex-direction:column;overflow:hidden;padding:2rem 2.5rem;background:#fafafa}
    .tool-history{width:280px;background:#fafafa;border-left:1px solid #eee;overflow-y:auto}

    /* Sidebar items as plain list */
    .thread-item{padding:.9rem 1rem;border-bottom:1px dashed #ddd;cursor:pointer}
    .thread-item:hover{background:#f0f0f0}
    .thread-item.active{background:#eaeaea;font-weight:bold}
    .thread-title{font-size:.95rem;margin-bottom:.15rem}
    .thread-snippet{font-size:.75rem;color:#666}

    /* Messages styled as cards */
    .messages{flex:1;overflow-y:auto;display:flex;flex-direction:column;gap:1.5rem}
    .card{background:#fff;border:1px solid #e5e5e5;border-radius:12px;padding:1.5rem;box-shadow:0 3px 6px rgba(0,0,0,.04)}
    .card-header{display:flex;align-items:center;margin-bottom:.8rem}
    .avatar{width:34px;height:34px;border-radius:34px;background:#999;color:#fff;display:flex;align-items:center;justify-content:center;font-size:.8rem;font-weight:bold;margin-right:.8rem}
    .meta{font-size:.8rem;color:#999}

    /* Tool history as stack */
    .history-section{padding:1.5rem;border-bottom:1px solid #eee}
    .history-title{font-weight:bold;margin-bottom:.6rem}
    .tool-call{font-family:monospace;background:#fff;border:1px solid #e5e5e5;border-radius:6px;padding:.6rem .8rem;font-size:.8rem;margin-bottom:.6rem;display:block;box-shadow:0 1px 2px rgba(0,0,0,.03)}

    /* Scrollbar */
    ::-webkit-scrollbar{width:8px}
    ::-webkit-scrollbar-thumb{background:#ccc;border-radius:8px}
  </style>
</head>
<body>
  <aside class="sidebar">
    <div class="thread-item active"><div class="thread-title">Bug in Checkout Flow</div><div class="thread-snippet">Customer experiencing error on step 3...</div></div>
    <div class="thread-item"><div class="thread-title">Feature Request: Dark Mode</div><div class="thread-snippet">Is there a way to enable dark mode on...</div></div>
    <div class="thread-item"><div class="thread-title">Thank you for the quick response!</div><div class="thread-snippet">Just wanted to say your support has...</div></div>
  </aside>

  <main class="main">
    <section class="messages">
      <div class="card"><div class="card-header"><div class="avatar">JD</div><div><strong>Jane Doe</strong><div class="meta">Oct 2, 2025 • 11:14 AM</div></div></div><p>Hi team, I'm encountering an issue during the checkout flow where the page freezes on step 3. Could you please look into this?</p></div>
      <div class="card"><div class="card-header"><div class="avatar">AJ</div><div><strong>Agent James</strong><div class="meta">Oct 2, 2025 • 11:20 AM</div></div></div><p>Thanks for reaching out, Jane! We're sorry about the trouble. Let me gather some information and I'll get back to you shortly.</p></div>
      <div class="card"><div class="card-header"><div class="avatar">JD</div><div><strong>Jane Doe</strong><div class="meta">Oct 2, 2025 • 11:45 AM</div></div></div><p>Any updates on this? I'm on a tight deadline.</p></div>
    </section>
  </main>

  <aside class="tool-history">
    <div class="history-section"><div class="history-title">Tool Calls</div><span class="tool-call">searchKnowledgeBase("checkout step 3 freeze")</span><span class="tool-call">fetchBugReport(#1248)</span><span class="tool-call">draftReply("Apology + workaround")</span></div>
    <div class="history-section"><div class="history-title">Analysis</div><p style="font-size:.85rem;color:#555;line-height:1.4">The customer cannot proceed past the payment step. Similar bug fixed in v2.4. Suggest clearing cache or switching browsers as temporary workaround while engineering investigates.</p></div>
  </aside>
</body>
</html>
</file>

<file path="variations/design4.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ProResponse AI – Thread View (Happy Fun)</title>
  <style>
    /* Reset */
    *,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
    body{font-family:'Comic Sans MS', 'Comic Neue', cursive;background:#fff9ed;color:#333;height:100vh;display:flex;overflow:hidden}

    /* Fun color palette */
    :root{
      --c1:#ff6b6b;
      --c2:#ffd93d;
      --c3:#6bcB77;
      --c4:#4d96ff;
    }

    /* Confetti background */
    body::before{content:"";position:fixed;inset:0;pointer-events:none;background-image:radial-gradient(circle at 10% 20%,var(--c1) 2%,transparent 2%),radial-gradient(circle at 80% 10%,var(--c2) 1.5%,transparent 2%),radial-gradient(circle at 50% 80%,var(--c3) 1.5%,transparent 2%),radial-gradient(circle at 20% 70%,var(--c4) 1.5%,transparent 2%);background-size:120px 120px;opacity:0.15}

    /* Layout */
    .sidebar{width:240px;background:var(--c1);color:#fff;overflow-y:auto}
    .main{flex:1;display:flex;flex-direction:column;overflow:hidden;background:#fff9ed}
    .tool-history{width:300px;background:var(--c4);color:#fff;overflow-y:auto}

    /* Threads */
    .thread-item{padding:1rem 1.25rem;border-bottom:3px dashed rgba(255,255,255,.4);cursor:pointer;transition:background .2s}
    .thread-item:hover{background:rgba(255,255,255,.1)}
    .thread-item.active{background:rgba(255,255,255,.25)}
    .thread-title{font-weight:bold;margin-bottom:.3rem}
    .thread-snippet{font-size:.8rem;opacity:.9}

    /* Messages */
    .messages{flex:1;padding:2rem;overflow-y:auto;display:flex;flex-direction:column;gap:1.2rem}
    .bubble{padding:1rem 1.25rem;border-radius:1.2rem;color:#fff;line-height:1.5;max-width:65%;box-shadow:0 4px 6px rgba(0,0,0,.05)}
    .left{align-self:flex-start;background:var(--c2);color:#222}
    .right{align-self:flex-end;background:var(--c3)}
    .meta{font-size:.7rem;margin-bottom:.4rem;font-weight:bold}

    /* Tool history */
    .history-section{padding:1rem;border-bottom:2px dashed rgba(255,255,255,.4)}
    .history-title{font-weight:bold;margin-bottom:.5rem;font-size:1.1rem}
    .tool-call{background:rgba(255,255,255,.15);padding:.6rem .9rem;border-radius:10px;font-size:.8rem;margin-bottom:.6rem;display:block}

    /* Scrollbar */
    ::-webkit-scrollbar{width:10px}
    ::-webkit-scrollbar-thumb{background:rgba(0,0,0,.2);border-radius:10px}
  </style>
</head>
<body>
  <aside class="sidebar">
    <div class="thread-item active"><div class="thread-title">Bug in Checkout Flow</div><div class="thread-snippet">Customer experiencing error on step 3...</div></div>
    <div class="thread-item"><div class="thread-title">Feature Request: Dark Mode</div><div class="thread-snippet">Is there a way to enable dark mode on...</div></div>
    <div class="thread-item"><div class="thread-title">Thank you for the quick response!</div><div class="thread-snippet">Just wanted to say your support has...</div></div>
  </aside>

  <main class="main">
    <section class="messages">
      <div class="bubble left"><div class="meta">Jane • 11:14 AM</div>Hi team, I'm encountering an issue during the checkout flow where the page freezes on step 3. Could you please look into this?</div>
      <div class="bubble right"><div class="meta">Agent • 11:20 AM</div>Thanks for reaching out, Jane! We're sorry about the trouble. Let me gather some information and I'll get back to you shortly.</div>
      <div class="bubble left"><div class="meta">Jane • 11:45 AM</div>Any updates on this? I'm on a tight deadline.</div>
    </section>
  </main>

  <aside class="tool-history">
    <div class="history-section"><div class="history-title">Tool Calls</div><span class="tool-call">searchKnowledgeBase("checkout step 3 freeze")</span><span class="tool-call">fetchBugReport(#1248)</span><span class="tool-call">draftReply("Apology + workaround")</span></div>
    <div class="history-section"><div class="history-title">Analysis</div><p style="font-size:.9rem;line-height:1.4">Suggested cache clear steps and alternate browser advice.</p></div>
  </aside>
</body>
</html>
</file>

<file path="variations/design5.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ProResponse AI – Thread View (Corporate)</title>
  <style>
    *,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
    body{font-family:'Times New Roman',serif;background:#f5f7fa;color:#1b1f23;height:100vh;display:flex}

    /* Corporate palette */
    :root{--navy:#0a2d53;--sky:#e6eef5;--accent:#0050b3}

    /* Layout */
    .sidebar{width:260px;background:var(--navy);color:#fff;overflow-y:auto}
    .main{flex:1;display:flex;flex-direction:column;overflow:hidden;padding:2rem;background:#ffffff}
    .tool-history{width:320px;background:var(--sky);overflow-y:auto;border-left:4px solid var(--accent)}

    /* Threads */
    .thread-item{padding:1rem 1.25rem;border-bottom:1px solid rgba(255,255,255,.15);cursor:pointer}
    .thread-item:hover{background:rgba(255,255,255,.1)}
    .thread-item.active{background:rgba(255,255,255,.2)}
    .thread-title{font-weight:bold;margin-bottom:.2rem}
    .thread-snippet{font-size:.8rem;opacity:.85}

    /* Messages */
    .messages{flex:1;overflow-y:auto}
    .message{max-width:700px;margin-bottom:1.8rem}
    .msg-header{margin-bottom:.4rem;font-size:.85rem;color:#555}
    .bubble{border-left:6px solid var(--accent);background:#f9fbfe;padding:1rem 1.2rem;border-radius:4px;line-height:1.6;box-shadow:0 1px 3px rgba(0,0,0,.05)}

    /* Tool history */
    .history-section{padding:1.2rem 1.4rem;border-bottom:1px solid #d0dce9}
    .history-title{font-weight:bold;color:var(--accent);margin-bottom:.4rem}
    .tool-call{font-family:monospace;background:#fff;border:1px solid #c3cfe4;border-left:4px solid var(--accent);padding:.6rem .8rem;font-size:.8rem;margin-bottom:.6rem;display:block}

    /* Scrollbar */
    ::-webkit-scrollbar{width:8px}
    ::-webkit-scrollbar-thumb{background:#bcd; border-radius:8px}
  </style>
</head>
<body>
  <aside class="sidebar">
    <div class="thread-item active"><div class="thread-title">Bug in Checkout Flow</div><div class="thread-snippet">Customer experiencing error on step 3...</div></div>
    <div class="thread-item"><div class="thread-title">Feature Request: Dark Mode</div><div class="thread-snippet">Is there a way to enable dark mode on...</div></div>
    <div class="thread-item"><div class="thread-title">Thank you for the quick response!</div><div class="thread-snippet">Just wanted to say your support has...</div></div>
  </aside>

  <main class="main">
    <section class="messages">
      <article class="message"><div class="msg-header">Jane Doe • Oct 2, 11:14 AM</div><div class="bubble">Hi team, I'm encountering an issue during the checkout flow where the page freezes on step 3. Could you please look into this?</div></article>
      <article class="message"><div class="msg-header">Agent James • Oct 2, 11:20 AM</div><div class="bubble">Thanks for reaching out, Jane. Our team is investigating the incident and will provide an update shortly.</div></article>
      <article class="message"><div class="msg-header">Jane Doe • Oct 2, 11:45 AM</div><div class="bubble">Any updates on this? I'm on a tight deadline.</div></article>
    </section>
  </main>

  <aside class="tool-history">
    <div class="history-section"><div class="history-title">Tool Calls</div><span class="tool-call">searchKnowledgeBase("checkout step 3 freeze")</span><span class="tool-call">fetchBugReport(#1248)</span><span class="tool-call">draftReply("Apology + workaround")</span></div>
    <div class="history-section"><div class="history-title">Analysis</div><p style="font-size:.85rem;line-height:1.5;color:#333">Incident replicated in staging. Engineering bug ticket escalated. Customer advised on workaround.</p></div>
  </aside>
</body>
</html>
</file>

<file path="variations/design6.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ProResponse AI – Thread View (Enterprise SaaS)</title>
  <style>
    *,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
    @media (prefers-color-scheme:dark){body{background:#0f172a;color:#e2e8f0}}
    body{font-family:'Inter',sans-serif;background:#f8fafc;color:#0f172a;height:100vh;display:flex}

    :root{--primary:#6366f1;--bg-side:#fff;--bg-main:#f8fafc;--bg-history:#f1f5f9;--border:#e2e8f0}

    /* Layout */
    .sidebar{width:270px;background:var(--bg-side);border-right:1px solid var(--border);overflow-y:auto}
    .main{flex:1;display:flex;flex-direction:column;overflow:hidden;background:var(--bg-main)}
    .tool-history{width:320px;background:var(--bg-history);border-left:1px solid var(--border);overflow-y:auto}

    /* Sidebar */
    .thread-item{padding:1.2rem 1.4rem;border-bottom:1px solid var(--border);cursor:pointer;transition:background .15s}
    .thread-item:hover{background:#eef2ff}
    .thread-item.active{background:#e0e7ff;border-left:4px solid var(--primary)}
    .thread-title{font-weight:600;margin-bottom:.25rem;color:#0f172a}
    .thread-snippet{font-size:.85rem;color:#64748b}

    /* Messages */
    .messages{flex:1;padding:2.5rem;overflow-y:auto}
    .bubble{max-width:700px;background:#ffffff;border:1px solid var(--border);border-radius:12px;padding:1.25rem 1.5rem;box-shadow:0 2px 4px rgba(15,23,42,.06);margin-bottom:1.8rem}
    .meta{font-size:.75rem;color:#64748b;margin-bottom:.6rem;font-weight:500}

    /* Tool history */
    .history-section{padding:1.5rem;border-bottom:1px solid var(--border)}
    .history-title{font-weight:600;color:var(--primary);margin-bottom:.7rem}
    .tool-call{font-family:monospace;background:#fff;border:1px solid var(--border);border-radius:8px;padding:.7rem 1rem;font-size:.8rem;margin-bottom:.8rem;display:block;box-shadow:0 1px 2px rgba(15,23,42,.04)}

    /* Scrollbar */
    ::-webkit-scrollbar{width:10px}
    ::-webkit-scrollbar-thumb{background:#cbd5e1;border-radius:10px}
  </style>
</head>
<body>
  <aside class="sidebar">
    <div class="thread-item active"><div class="thread-title">Bug in Checkout Flow</div><div class="thread-snippet">Customer experiencing error on step 3...</div></div>
    <div class="thread-item"><div class="thread-title">Feature Request: Dark Mode</div><div class="thread-snippet">Is there a way to enable dark mode on...</div></div>
    <div class="thread-item"><div class="thread-title">Thank you for the quick response!</div><div class="thread-snippet">Just wanted to say your support has...</div></div>
  </aside>

  <main class="main">
    <section class="messages">
      <div class="bubble"><div class="meta">Jane Doe • Oct 2, 11:14 AM</div>Hi team, I'm encountering an issue during the checkout flow where the page freezes on step 3. Could you please look into this?</div>
      <div class="bubble" style="border-left:4px solid var(--primary)"><div class="meta">Agent James • Oct 2, 11:20 AM</div>Thanks for reaching out, Jane! We're sorry about the trouble. Let me gather some information and I'll get back to you shortly.</div>
      <div class="bubble"><div class="meta">Jane Doe • Oct 2, 11:45 AM</div>Any updates on this? I'm on a tight deadline.</div>
    </section>
  </main>

  <aside class="tool-history">
    <div class="history-section"><div class="history-title">Tool Calls</div><span class="tool-call">searchKnowledgeBase("checkout step 3 freeze")</span><span class="tool-call">fetchBugReport(#1248)</span><span class="tool-call">draftReply("Apology + workaround")</span></div>
    <div class="history-section"><div class="history-title">Analysis</div><p style="font-size:.85rem;line-height:1.5;color:#334155">Root cause confirmed. Patch scheduled for release 2.4.1. Temporary solution shared with customer.</p></div>
  </aside>
</body>
</html>
</file>

<file path="variations/source.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ProResponse AI – Thread View</title>
  <style>
    /* Reset & base */
    *, *::before, *::after { box-sizing: border-box; margin: 0; padding: 0; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      background: #fafafa;
      color: #1e1e1e;
      height: 100vh;
      display: flex;
    }

    /* Layout */
    .sidebar, .tool-history { background: #ffffff; border-right: 1px solid #e5e7eb; }
    .sidebar {
      width: 250px;
      overflow-y: auto;
    }
    .tool-history {
      width: 300px;
      border-left: 1px solid #e5e7eb;
      overflow-y: auto;
    }
    .main {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    /* Sidebar items */
    .thread-item {
      padding: 1rem 1.25rem;
      border-bottom: 1px solid #f3f4f6;
      cursor: pointer;
      transition: background 0.15s ease;
    }
    .thread-item:hover { background: #f9fafb; }
    .thread-item.active { background: #eef2ff; }
    .thread-title { font-weight: 600; margin-bottom: 0.25rem; }
    .thread-snippet { font-size: 0.875rem; color: #6b7280; }

    /* Conversation */
    .messages {
      flex: 1;
      padding: 2rem 3rem;
      overflow-y: auto;
    }
    .message {
      max-width: 600px;
      margin-bottom: 1.5rem;
    }
    .msg-header { display: flex; align-items: center; margin-bottom: 0.5rem; }
    .avatar {
      width: 32px; height: 32px;
      background: #c7c7c7;
      border-radius: 50%;
      margin-right: 0.75rem;
      display: flex; align-items: center; justify-content: center;
      color: #fff; font-size: 0.875rem; font-weight: 600;
    }
    .author { font-weight: 600; }
    .timestamp { font-size: 0.75rem; color: #9ca3af; margin-left: 0.5rem; }
    .bubble {
      background: #ffffff;
      border: 1px solid #e5e7eb;
      border-radius: 0.75rem;
      padding: 1rem 1.25rem;
      line-height: 1.5;
    }

    /* Tool history */
    .history-section { padding: 1rem 1.25rem; border-bottom: 1px solid #f3f4f6; }
    .history-title { font-weight: 600; margin-bottom: 0.5rem; }
    .tool-call {
      background: #f9fafb;
      border: 1px solid #e5e7eb;
      border-radius: 0.5rem;
      padding: 0.75rem 1rem;
      font-size: 0.875rem;
      margin-bottom: 0.75rem;
      word-break: break-all;
    }

    /* Scrollbars */
    ::-webkit-scrollbar { width: 10px; height: 10px; }
    ::-webkit-scrollbar-track { background: #f3f4f6; }
    ::-webkit-scrollbar-thumb { background: #cbd5e1; border-radius: 10px; }
    ::-webkit-scrollbar-thumb:hover { background: #94a3b8; }
  </style>
</head>
<body>
  <!-- Left Sidebar -->
  <aside class="sidebar">
    <div class="thread-item active">
      <div class="thread-title">Bug in Checkout Flow</div>
      <div class="thread-snippet">Customer experiencing error on step 3...</div>
    </div>
    <div class="thread-item">
      <div class="thread-title">Feature Request: Dark Mode</div>
      <div class="thread-snippet">Is there a way to enable dark mode on...</div>
    </div>
    <div class="thread-item">
      <div class="thread-title">Thank you for the quick response!</div>
      <div class="thread-snippet">Just wanted to say your support has...</div>
    </div>
    <!-- Add more thread items as needed -->
  </aside>

  <!-- Main Conversation -->
  <main class="main">
    <section class="messages">
      <!-- Message 1 -->
      <article class="message">
        <div class="msg-header">
          <div class="avatar">JD</div>
          <span class="author">Jane Doe</span>
          <time class="timestamp">Oct 2, 2025 • 11:14 AM</time>
        </div>
        <div class="bubble">
          Hi team, I'm encountering an issue during the checkout flow where the page freezes on step 3. Could you please look into this?
        </div>
      </article>

      <!-- Message 2 -->
      <article class="message">
        <div class="msg-header">
          <div class="avatar">AJ</div>
          <span class="author">Agent James</span>
          <time class="timestamp">Oct 2, 2025 • 11:20 AM</time>
        </div>
        <div class="bubble">
          Thanks for reaching out, Jane! We're sorry about the trouble. Let me gather some information and I'll get back to you shortly.
        </div>
      </article>

      <!-- Message 3 -->
      <article class="message">
        <div class="msg-header">
          <div class="avatar">JD</div>
          <span class="author">Jane Doe</span>
          <time class="timestamp">Oct 2, 2025 • 11:45 AM</time>
        </div>
        <div class="bubble">
          Any updates on this? I'm on a tight deadline.
        </div>
      </article>
    </section>
  </main>

  <!-- Right Sidebar: Agent Tool History -->
  <aside class="tool-history">
    <div class="history-section">
      <div class="history-title">Tool Calls</div>
      <div class="tool-call">searchKnowledgeBase("checkout step 3 freeze")</div>
      <div class="tool-call">fetchBugReport(#1248)</div>
      <div class="tool-call">draftReply("Apology + workaround")</div>
    </div>
    <div class="history-section">
      <div class="history-title">Analysis</div>
      <p style="font-size: 0.9rem; line-height: 1.4; color: #4b5563;">
        The customer cannot proceed past the payment step. Similar bug fixed in v2.4. Suggest clearing cache or switching browsers as temporary workaround while engineering investigates.
      </p>
    </div>
  </aside>
</body>
</html>
</file>

<file path=".env.example">
VITE_API_URL=http://localhost:3000

# Neon Auth environment variables for React (Vite)
VITE_STACK_PROJECT_ID=YOUR_NEON_AUTH_PROJECT_ID
VITE_STACK_PUBLISHABLE_CLIENT_KEY=YOUR_NEON_AUTH_PUBLISHABLE_KEY
</file>

<file path="CLAUDE.md">
Try to always use tailwind v4 design tokens from @src/index.css

Try to keep components minimal and consistent. Don't make new components unless strictly necessary. 

Run `make lf` frequently (from the root dir). When fixing issues from linting use sub agents to avoid using up too much of your context.
</file>

<file path="design-system.md">
# Proresponse.ai Design System

This document outlines the design system for proresponse.ai, focusing on a minimal, scalable, and code-first approach. The system is designed to work with our tech stack: React, Vite, and Tailwind CSS, with `shadcn` as a foundation for components.

## 1. Token Management System

We will adopt a CSS Custom Variables-based system for managing design tokens. This approach integrates seamlessly with Tailwind CSS and is the standard for `shadcn`.

- **Source of Truth**: A global CSS file (e.g., `src/index.css`) will define all design tokens as CSS variables within the `:root` scope.
- **Integration**: `tailwind.config.js` will be configured to use these CSS variables, allowing us to use standard Tailwind utility classes (e.g., `bg-background`, `text-primary`) that are powered by our custom tokens.
- **Theming**: This system provides a straightforward path to implement features like dark mode by redefining the variable values within a `[data-theme="dark"]` or `.dark` selector.

## 2. Design Tokens (Minimal Set)

### Colors
Defined semantically to support theming. We'll start with a base grayscale and a primary accent color.

- `background`: The main app background.
- `foreground`: The default text color.
- `card`: The background color for card-like elements.
- `card-foreground`: Text color for content within cards.
- `primary`: The primary interactive color for buttons and links.
- `primary-foreground`: Text color for content on primary-colored elements.
- `secondary`: A subtle color for secondary elements and borders.
- `secondary-foreground`: Text color for secondary elements.
- `destructive`: A color for destructive actions (e.g., delete).
- `destructive-foreground`: Text color for destructive elements.
- `accent`: An accent color for highlights, notifications, or special states.
- `accent-foreground`: Text color for accent elements.
- `border`: The color for borders and separators.
- `input`: The background color for input fields.
- `ring`: The color for focus rings on interactive elements.

### Typography
- **Font Family**: `sans`: A modern, legible sans-serif font (e.g., Inter).
- **Font Sizes**: A basic type scale (e.g., `xs`, `sm`, `base`, `lg`, `xl`, `2xl`).
- **Font Weights**: `normal`, `medium`, `semibold`, `bold`.
- **Line Heights**: Corresponding line heights for each font size to ensure readability.

### Spacing
A standard 4-point numeric scale will be used for padding, margins, and gaps, aligning with Tailwind's default spacing scale.

### Sizing
Consistent sizing for elements like buttons and inputs.

### Border Radius
- `sm`: Small radius for small elements.
- `md`: Medium radius for cards and inputs.
- `lg`: Large radius for larger containers or modals.
- `full`: For circular elements like avatars.

## 3. Design Primitives

- **Typography**: Styles for H1, H2, H3, P, Blockquote, and small/subtle text.
- **Layout**: We will primarily use Flexbox and CSS Grid via Tailwind utilities. We will create simple layout components like `Box`, `Flex`, and `Grid` for common patterns.
- **Iconography**: We will use `lucide-react`, which integrates well with `shadcn` and provides a comprehensive, lightweight set of icons.

## 4. Atom Components

The most basic building blocks of our UI.

- `Button`: Variants: primary, secondary, destructive, ghost, link.
- `Input`: Basic text input.
- `Label`: For form elements.
- `Avatar`: To display user/contact images or initials.
- `Badge` (or `Tag`): For status indicators like "urgent" or "unread".
- `Separator`: For visual dividers.
- `Icon`: A wrapper for displaying icons from `lucide-react`.

## 5. Molecule Components

Simple combinations of atoms to form functional units.

- `SearchInput`: An `Input` with a search `Icon`.
- `FilterPills`: A group of `Button` or `Badge` components for filtering threads.
- `ThreadPreview`: The list item for the thread list, combining `Avatar`, `Badge`, and text elements.
- `AgentAction`: Displays a single action or analysis step from the agent (e.g., "Queried Knowledge Base").

## 6. Organism Components

Complex components that form distinct sections of the interface.

- `Header`: App header containing the logo, account menu, and primary navigation.
- `ThreadList`: The scrollable list of `ThreadPreview` molecules.
- `ThreadDetail`: The main view showing the full email conversation.
- `AgentPanel`: The right sidebar containing a list of `AgentAction` molecules.
- `Composer`: The rich text editor for drafting email replies.

## 7. Templates and Pages

### Templates (Layouts)
- `AuthLayout`: A centered, single-column layout for login and signup screens.
- `AppLayout`: The main three-column application layout (ThreadList, ThreadDetail, AgentPanel).

### Pages
- `LoginPage`: The entry point of the application.
- `InboxPage`: The main page displaying email threads and the agent's work. It will use the `AppLayout`.

## 8. Documentation and Demonstration Plan

We will use **Storybook** to document and showcase our design system.

- **Why Storybook?**: It allows us to develop and test components in isolation, automatically generating a living style guide that stays in sync with our codebase.
- **Implementation Plan**:
    1.  Install and configure Storybook in the project.
    2.  Create stories for every Atom, Molecule, and Organism.
    3.  Create documentation pages within Storybook to outline our design principles (tokens, typography, etc.).
- **Benefit**: This provides a single source of truth for designers and developers, improving consistency, speeding up development, and simplifying onboarding for new team members.
</file>

<file path="eslint.config.js">
// For more info, see https://github.com/storybookjs/eslint-plugin-storybook#configuration-flat-config-format
import storybook from "eslint-plugin-storybook";

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
], storybook.configs["flat/recommended"]);
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "support-email",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "lint:all": "tsc --noEmit && eslint .",
    "preview": "vite preview",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build"
  },
  "dependencies": {
    "@stackframe/react": "^2.8.17",
    "@tailwindcss/vite": "^4.1.11",
    "@tanstack/react-query": "^5.81.5",
    "clsx": "^2.1.1",
    "lucide-react": "^0.525.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.3",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^4.1.11",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@chromatic-com/storybook": "^4.0.1",
    "@eslint/js": "^9.30.1",
    "@storybook/addon-a11y": "^9.0.16",
    "@storybook/addon-docs": "^9.0.16",
    "@storybook/addon-onboarding": "^9.0.16",
    "@storybook/addon-vitest": "^9.0.16",
    "@storybook/react-vite": "^9.0.16",
    "@tanstack/react-query-devtools": "^5.81.5",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "@vitest/browser": "^3.2.4",
    "@vitest/coverage-v8": "^3.2.4",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "eslint-plugin-storybook": "^9.0.16",
    "globals": "^16.3.0",
    "playwright": "^1.53.2",
    "storybook": "^9.0.16",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.35.1",
    "vite": "^7.0.3",
    "vitest": "^3.2.4"
  }
}
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```
</file>

<file path="template.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ProResponse AI – Thread View</title>
  <style>
    /* Reset & base */
    *, *::before, *::after { box-sizing: border-box; margin: 0; padding: 0; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      background: #fafafa;
      color: #1e1e1e;
      height: 100vh;
      display: flex;
    }

    /* Layout */
    .sidebar, .tool-history { background: #ffffff; border-right: 1px solid #e5e7eb; }
    .sidebar {
      width: 250px;
      overflow-y: auto;
    }
    .tool-history {
      width: 300px;
      border-left: 1px solid #e5e7eb;
      overflow-y: auto;
    }
    .main {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    /* Sidebar items */
    .thread-item {
      padding: 1rem 1.25rem;
      border-bottom: 1px solid #f3f4f6;
      cursor: pointer;
      transition: background 0.15s ease;
    }
    .thread-item:hover { background: #f9fafb; }
    .thread-item.active { background: #eef2ff; }
    .thread-title { font-weight: 600; margin-bottom: 0.25rem; }
    .thread-snippet { font-size: 0.875rem; color: #6b7280; }

    /* Conversation */
    .messages {
      flex: 1;
      padding: 2rem 3rem;
      overflow-y: auto;
    }
    .message {
      max-width: 600px;
      margin-bottom: 1.5rem;
    }
    .msg-header { display: flex; align-items: center; margin-bottom: 0.5rem; }
    .avatar {
      width: 32px; height: 32px;
      background: #c7c7c7;
      border-radius: 50%;
      margin-right: 0.75rem;
      display: flex; align-items: center; justify-content: center;
      color: #fff; font-size: 0.875rem; font-weight: 600;
    }
    .author { font-weight: 600; }
    .timestamp { font-size: 0.75rem; color: #9ca3af; margin-left: 0.5rem; }
    .bubble {
      background: #ffffff;
      border: 1px solid #e5e7eb;
      border-radius: 0.75rem;
      padding: 1rem 1.25rem;
      line-height: 1.5;
    }

    /* Tool history */
    .history-section { padding: 1rem 1.25rem; border-bottom: 1px solid #f3f4f6; }
    .history-title { font-weight: 600; margin-bottom: 0.5rem; }
    .tool-call {
      background: #f9fafb;
      border: 1px solid #e5e7eb;
      border-radius: 0.5rem;
      padding: 0.75rem 1rem;
      font-size: 0.875rem;
      margin-bottom: 0.75rem;
      word-break: break-all;
    }

    /* Scrollbars */
    ::-webkit-scrollbar { width: 10px; height: 10px; }
    ::-webkit-scrollbar-track { background: #f3f4f6; }
    ::-webkit-scrollbar-thumb { background: #cbd5e1; border-radius: 10px; }
    ::-webkit-scrollbar-thumb:hover { background: #94a3b8; }
  </style>
</head>
<body>
  <!-- Left Sidebar -->
  <aside class="sidebar">
    <div class="thread-item active">
      <div class="thread-title">Bug in Checkout Flow</div>
      <div class="thread-snippet">Customer experiencing error on step 3...</div>
    </div>
    <div class="thread-item">
      <div class="thread-title">Feature Request: Dark Mode</div>
      <div class="thread-snippet">Is there a way to enable dark mode on...</div>
    </div>
    <div class="thread-item">
      <div class="thread-title">Thank you for the quick response!</div>
      <div class="thread-snippet">Just wanted to say your support has...</div>
    </div>
    <!-- Add more thread items as needed -->
  </aside>

  <!-- Main Conversation -->
  <main class="main">
    <section class="messages">
      <!-- Message 1 -->
      <article class="message">
        <div class="msg-header">
          <div class="avatar">JD</div>
          <span class="author">Jane Doe</span>
          <time class="timestamp">Oct 2, 2025 • 11:14 AM</time>
        </div>
        <div class="bubble">
          Hi team, I'm encountering an issue during the checkout flow where the page freezes on step 3. Could you please look into this?
        </div>
      </article>

      <!-- Message 2 -->
      <article class="message">
        <div class="msg-header">
          <div class="avatar">AJ</div>
          <span class="author">Agent James</span>
          <time class="timestamp">Oct 2, 2025 • 11:20 AM</time>
        </div>
        <div class="bubble">
          Thanks for reaching out, Jane! We're sorry about the trouble. Let me gather some information and I'll get back to you shortly.
        </div>
      </article>

      <!-- Message 3 -->
      <article class="message">
        <div class="msg-header">
          <div class="avatar">JD</div>
          <span class="author">Jane Doe</span>
          <time class="timestamp">Oct 2, 2025 • 11:45 AM</time>
        </div>
        <div class="bubble">
          Any updates on this? I'm on a tight deadline.
        </div>
      </article>
    </section>
  </main>

  <!-- Right Sidebar: Agent Tool History -->
  <aside class="tool-history">
    <div class="history-section">
      <div class="history-title">Tool Calls</div>
      <div class="tool-call">searchKnowledgeBase("checkout step 3 freeze")</div>
      <div class="tool-call">fetchBugReport(#1248)</div>
      <div class="tool-call">draftReply("Apology + workaround")</div>
    </div>
    <div class="history-section">
      <div class="history-title">Analysis</div>
      <p style="font-size: 0.9rem; line-height: 1.4; color: #4b5563;">
        The customer cannot proceed past the payment step. Similar bug fixed in v2.4. Suggest clearing cache or switching browsers as temporary workaround while engineering investigates.
      </p>
    </div>
  </aside>
</body>
</html>
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
/// <reference types="vitest/config" />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import tailwindcss from '@tailwindcss/vite';

// https://vite.dev/config/
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import { storybookTest } from '@storybook/addon-vitest/vitest-plugin';
const dirname = typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));

// More info at: https://storybook.js.org/docs/next/writing-tests/integrations/vitest-addon
export default defineConfig({
  plugins: [react(), tailwindcss()],
  test: {
    projects: [{
      extends: true,
      plugins: [
      // The plugin will run tests for the stories defined in your Storybook config
      // See options at: https://storybook.js.org/docs/next/writing-tests/integrations/vitest-addon#storybooktest
      storybookTest({
        configDir: path.join(dirname, '.storybook')
      })],
      test: {
        name: 'storybook',
        browser: {
          enabled: true,
          headless: true,
          provider: 'playwright',
          instances: [{
            browser: 'chromium'
          }]
        },
        setupFiles: ['.storybook/vitest.setup.ts']
      }
    }]
  }
});
</file>

<file path="vitest.shims.d.ts">
/// <reference types="@vitest/browser/providers/playwright" />
</file>

</files>
