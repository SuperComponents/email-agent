services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: email-agent-frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - email-agent-network

  landing-page:
    build:
      context: ./landing-page
      dockerfile: Dockerfile
      args:
        BUN_PUBLIC_APP_URL: ${BUN_PUBLIC_APP_URL:-http://localhost:5173}
    depends_on:
      - frontend
    container_name: email-agent-landing
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - email-agent-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: email-agent-backend
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: postgres://email_agent:email_agent_pw@db:5432/email_agent
      DB_HOST: db
      DB_PORT: 5432
    volumes:
      - ./demo-data:/demo-data:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - email-agent-network

  db:
    image: postgres:16-alpine
    container_name: email-agent-db
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: email_agent
      POSTGRES_PASSWORD: email_agent_pw
      POSTGRES_DB: email_agent
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U email_agent"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - email-agent-network

volumes:
  postgres_data:

networks:
  email-agent-network:
    driver: bridge 